Template.selectADeck.onCreated(function(){
    this.options = new ReactiveDict();
});


formatDeckArchetypes = function(DecksArchetypes_id) {
    var decksArchetypesQuery = DecksArchetypes.findOne({_id : DecksArchetypes_id});
    var decksNameQuery = DecksNames.find({DecksArchetypes_id : DecksArchetypes_id}).fetch();

    var html = '<table class="table table-sm childTable">';
    decksNameQuery.forEach(function(decksNamesObj){
        html += '<tr>'+
            '<td></td>'+
            '<td class="tableName"><a href="/decks/' + FlowRouter.getParam("format") + '/' + DecksArchetypes.findOne({_id : DecksArchetypes_id}).name+'/'+ decksNamesObj.name +'">'+decksNamesObj.name+'</a></td>'+
            '<td class="tableMana">';

        var manas = getCssManaByNumberFromDeckNameById(decksNamesObj._id);
        manas.forEach(function(mana){
            html += "<div class='mana " + mana.mana + "'></div>";
        });
        html += '</td>'+
            '<td class="tableType">' + decksArchetypesQuery.type +'</td>';
        html += '</tr>';
    });
    html += "</table>";
    return html;
}

Template.selectADeck.onRendered(function(){
    $( "#slider-range" ).slider({
        range: true,
        min: 0,
        max: 2000,
        values: [ 0, 2000 ],
        slide: function( event, ui ) {
            $("#minAmount").text(ui.values[ 0 ]);
            $("#maxAmount").text(ui.values[ 1 ]);
            tablePriceSearch();
        }
    });

    $("#minAmount").text($( "#slider-range" ).slider( "values", 0 ));
    $("#maxAmount").text($( "#slider-range" ).slider( "values", 1 ));



    if ($.fn.DataTable.isDataTable("#archetypeListTable")) {
        $('#archetypeListTable').DataTable().clear();
        $('#archetypeListTable').DataTable().destroy({
            remove : true
        });
        var $table = $("<table>", {id : "archetypeListTable", class : "table table-sm", cellSpacing: 0, width : "100%"});

        // var test = '<table id = ""class="cell-border">';
        $(".js-archetypeListTable").append($table);
    }
    // debugger
    $('#archetypeListTable').DataTable({
        pageLength: 20,
        data: DecksArchetypes.find({format : FlowRouter.getParam("format")}).fetch(),
        order: [[ 1, "asc" ]],
        pagingType: "simple",
        dom :   "<'row'<'col-sm-12 tableHeight'tr>>" +
        "<'row'<'col-sm-6'i><'col-sm-6'p>>",
        columnDefs : [{
            targets : 0,
            createdCell : function(td, cellData, rowData, row, col){
                $(td).addClass("details-control");
                $(td).attr("data-_id", rowData._id);
            }
        },
            {
                orderable : false, targets : "_all"
            }],
        columns: [
            {
                width : "10px", data : function(row, type, val, meta){
                return "";
            }
            },
            {
                width : "200px",title: "name", data: "name", render : function(data, type, row, meta){
                if (type === 'filter') {
                    return data;
                }
                else if (type === 'display') {
                    var html = '<span><a href="/decks/' + FlowRouter.getParam("format") + '/' + replaceTokenWithDash(row.name) + '">'+ row.name + '</a></span>';
                    return html;
                }
                // 'sort', 'type' and undefined all just use the integer
                return data;

            },
                createdCell: function (td, cellData, rowData, row, col) {

                }
            },
            {
                title: "colors", render : function(data, type, row, meta){
                if (type === 'display') {
                    return getHTMLColorsFromArchetypes(row._id);
                }

                var manas = "";
                getColorsListFromArchetypes(row._id).forEach(function(manaObj){
                    manas += manaObj.mana;
                });
                return manas;
            }},
            {
                title: "Type", data: "type"
            }
        ]
    });

    this.autorun(()=>{
        $('#archetypeListTable').DataTable().clear()
            .rows.add(DecksArchetypes.find({format : FlowRouter.getParam("format")}).fetch())

            .draw();
        var table = $("#archetypeListTable").DataTable();

        $('#archetypeListTable tbody').on('click', 'td.details-control', function () {
            var decksArchetypes_id = $(this).attr("data-_id");
            var tr = $(this).closest('tr');
            var row = table.row(tr);
            if (row.child.isShown()) {
                // This row is already open - close it
                row.child.hide();
                tr.removeClass('shown');
            } else {
                // Open this row
                row.child($(formatDeckArchetypes(decksArchetypes_id))).show();
                tr.addClass('shown');
            }
        });
    })

});

Template.selectADeck.events({
    'change .js-colorsOption input': function (evt, tmp) {
        tableColorsSearch();
    },
    'change .js-typeOptions input': function (evt, tmp) {
        tableTypeSearch();
    },
    'change .js-deckOrArchetype input': function (evt, tmp) {
        if($(evt.target).val() == "decks"){
            Session.set("deckOrArchetype", true);
        }else{
            Session.set("deckOrArchetype", false);
        }
    }
});

tableColorsSearch = function(){
    var table = $('#archetypeListTable').DataTable();


//COLORS
    var colorsOptions = {b : false, c : false, g : false, r : false, u : false,  w : false};
    var colorsRegex = "";
    var quantity = 0;

    if($("input:checked:radio[name=optionsRadio]").val() == "contain") {
        var colorsRegex = "(";
        var colorsArray = [];
        for(var key in colorsOptions){
            if($("input:checked[role=checkbox][value="+key+"]:checked").length > 0){
                quantity++;
                colorsArray.push(key);
            }
        }
        colorsRegex += colorsArray.join("|");
        colorsRegex += ")";
    }else{
        for(var key in colorsOptions){
            if($("input:checked[role=checkbox][value="+key+"]:checked").length > 0){
                quantity++;
                colorsRegex += "(?=.*" + key + ")";
            }
        }
        colorsRegex += "(?=\\b\\w{"+ quantity +"}\\b)" + colorsRegex;
    }

    if(quantity==0){
        colorsRegex = "^$";
    }
    table
        .column(2)
        .search(colorsRegex, true)
        .draw();
};

tableTypeSearch = function(){

    if(!Session.get("deckOrArchetype")){
        var table = $('#archetypeListTable').DataTable();
    }else{

        var table = $('#deckListTable').DataTable();
    }

    var typesOptions = ["aggro", "combo", "control"];
    var typeSelectedOptions = [];
    for(var i = 0; i < typesOptions.length; i++){
        if($("input:checked[role=checkbox][value=" + typesOptions[i] + "]:checked").length) {
            typeSelectedOptions.push(typesOptions[i]);
        }
    }

    var typeOptionsRegex = typeSelectedOptions.join("|");
    if(typeOptionsRegex==""){
        typeOptionsRegex = "^$";
    }

    table.columns(3)
        .search(typeOptionsRegex, true)
        .draw();
}

tablePriceSearch = function(){

    var table = $('#archetypeListTable').DataTable();


    var min = parseInt($("#minAmount").text());
    var max = parseInt($("#maxAmount").text());

    // if(!Session.get("deckOrArchetype")){
        var minValues = table
            .column(4)
            .data()
            .filter(function(value, index){
                return parseInt(value) > min;
            }).join("|");

        var maxValues = table
            .column(5)
            .data()
            .filter(function(value, index){
                return parseInt(value) < max;
            }).join("|");
    // }

    // else{
    //     var price = "("
    //     price += table
    //         .column(4)
    //         .data()
    //         .filter(function(value, index){
    //             return parseInt(value) > min && parseInt(value) < max;
    //         }).join("|");
    //     price += ")"
    // }

    var regex = true;
    if(minValues=="" || maxValues==""){
        regex = false;
    }
    table.columns(4)
        .search(minValues, regex)
        .draw();

    table.columns(5)
        .search(maxValues, regex)
        .draw();

};

//{ removeField : function(field_id) {
//    _DeckNamesField.remove({_id : field_id});
//    _DeckNamesCards.remove({fieldName_id : field_id});
//},
//getLowestDeckNameID : function() {
//    var min = _DeckNamesId.findOne({}, {sort : {deck_id : 1}});
//    var max = _DeckNamesId.findOne({}, {sort : {deck_id : -1}});
//    var ids = _DeckNamesId.find({},{sort : {deck_id : 1}}).fetch();
//
//    if(min == null)
//    {
//        return 1;
//    }
//
//    min = parseInt(min.deck_id);
//    max = parseInt(max.deck_id);
//
//    console.log("Min: " + min);
//    console.log("Max: " + max);
//
//    console.log("Lenght: " + ids.length);
//
//    if(max == ids.length)
//    {
//        return max + 1;
//    }else
//    {
//        var position = 1;
//        console.log("Start Off");
//        for(var i = 0; i<ids.length; i++)
//        {
//            console.log(ids[i].deck_id);
//            if(position != ids[i].deck_id)
//            {
//                return position;
//            }
//            position++;
//        }
//    }
//},
//findBestResult : function(deckID) {
//    console.log("\r\n\r\n");
//    var deckWithoutName = _Deck.find({title: ""}).fetch();
//
//    var Results = [];
//
//    for(var i = 0; i< deckWithoutName.length ; i++)
//    {
//        positive = 0;
//        negative = 0;
//        _DeckCards.find({
//            deck_id : deckWithoutName[i]._id._str,
//            sideboard : false
//        }).forEach(function(card){
//            var result = _DeckNamesCards.find
//            ({
//                deckName_id : deckID,
//                type : 2,
//                name : card.name
//            }).fetch();
//
//            //console.log(result);
//
//            if(result.length == 1){
//                positive++;
//            }else
//            {
//                negative++;
//            }
//        });
//
//        console.log(deckWithoutName[i].playerName + "   \t" + (positive/(positive + negative)) );
//    }
//},
//findBestDeckNames : function(){
//    console.log("\r\n\r\n");
//    var deckWithoutName = _Deck.find({title: ""}).fetch();
//    var deckNameIds = _DeckNamesId.find({}).fetch();
//
//    var results = [];
//
//    for(var i = 0; i< deckWithoutName.length ; i++)
//    {
//        var decksresults = [];
//        var percentage = 0;
//        for(var j = 0 ; j < deckNameIDs.length ; j++){
//            var decknameidcards = _DeckNamesCards.find({deckName_id : decknameids[j]});
//
//            var deckWithoutNameCards = [];
//
//            _DeckCards.find({
//                deck_id : deckWithoutName[i]._id._str,
//                sideboard : false
//            }).forEach(function(card) {
//                deckWithoutNameCards.push(card.name);
//            });
//
//            var result = _DeckNamesCards.find({
//                deckName_id: deckNameIDs[j]._id,
//                type: 2,
//                name: {$in : deckWithoutNameCards}
//            }).fetch();
//
//            percentage = PrettifyFormatNum2Decimals(result.length/deckWithoutNameCards.length);
//
//            if(percentage > 50)
//            {
//                decksresults.push({
//                    decknameID : deckNameIDs[j]._id,
//                    percentage : percentage
//                });
//
//            }
//        }
//        if(decksresults.length != 0)
//        {
//            results.push(
//                {
//                    id: deckWithoutName[i]._id,
//                    playerName: deckWithoutName[i].playerName,
//                    decksresults: decksresults
//                }
//            );
//        }
//    }
//    return results;
//},
//findZeroDeckNames : function(){
//    console.log("\r\n\r\n");
//    var deckWithoutName = _Deck.find({title: ""}).fetch();
//    var decknameids = _DeckNamesId.find({}).fetch();
//
//    var results = [];
//
//    for(var i = 0; i< deckWithoutName.length ; i++)
//    {
//        var decksresults = [];
//        var percentage = 0;
//        for(var j = 0 ; j < decknameids.length ; j++){
//
//            var decknameidcards = _DeckNamesCards.find({deckName_id : decknameids[j]});
//
//            var deckWithoutNameCards = [];
//
//            _DeckCards.find({
//                deck_id : deckWithoutName[i]._id._str,
//                sideboard : false
//            }).forEach(function(card) {
//                deckWithoutNameCards.push(card.name);
//            });
//
//            var result = _DeckNamesCards.find({
//                deckName_id: decknameids[j]._id,
//                type: 2,
//                name: {$in : deckWithoutNameCards}
//            }).fetch();
//
//            percentage = (result.length/deckWithoutNameCards.length) * 100;
//
//            if(percentage < 50)
//            {
//                decksresults.push({
//                    decknameID : decknameids[j]._id,
//                    percentage : percentage
//                });
//
//            }
//        }
//        if(decksresults.length != 0)
//        {
//            results.push(
//                {
//                    id: deckWithoutName[i]._id,
//                    playerName: deckWithoutName[i].playerName,
//                    decksresults: decksresults
//                }
//            );
//        }
//
//
//    }
//    for(var i = 0 ; i <results.length;i++)
//    {
//        console.log(results[i].playerName);
//        console.log(results[i].id);
//        for(var j = 0 ; j < results[i].decksresults.length; j++)
//        {
//            console.log(results[i].decksresults[j]);
//        }
//    }
//},

//request(address, Meteor.bindEnvironment(function(error, response, body) {
//    if (!error && response.statusCode == 200) {
//        var $ = cheerio.load(body);
//        var field = $($('h5')[0]).html();
//        var quantityPatt = /x\d/i;
//        var xQuantityPatt = /\d/i;
//        var quantity = field.match(quantityPatt)[0].match(xQuantityPatt)[0];
//        console.log(quantity);
//        return quantity;
//    }
//}));


//+++++++++++++++++++++++++++
//deckPopOutOption          +
//+++++++++++++++++++++++++++

//Template.deckPopOutOption.helpers({
//    deckName : function(){
//        var selectedDeck = Session.get("selectedDeck");
//        var decks = Session.get("deckPercentageOptions");
//        console.log(decks);
//        for(var i = 0; i < decks.length; i++){
//            console.log(i);
//            if(decks[i].id === selectedDeck){
//                return decks[i];
//            }
//        }
//    }
//    //,
//    //thing : function(){
//    //    var decks = Session.get("deckPercentageOptions");
//    //    //return
//    //}
//});
//Template.deckPopOutOption.events({
//    "click .closeModal" : function(evt, template){
//        Session.set('showDeckPopOutOption', false);
//        //Session.set('badDeckChoose',false);
//    }
//});
//Template.deckPopOutOption.onRendered(function(){
//
//});
//Template.deckPopOutOption.onCreated(function(){
//
//});


//+++++++++++++++++++++++++
//deckPopOut              +
//+++++++++++++++++++++++++

//Template.deckPopOut.helpers({
//    badDeckChoose : function(){
//        return Session.get('badDeckChoose');
//    },
//    deckName : function(){
//        if(Session.get("Name")){
//            return Session.get("SelectedDeckName");
//        }
//        return "No Name Yet";
//    }
//});
//Template.deckPopOut.events({
//    "click .closeModal" : function(evt, template){
//        Session.set('showDeckPopOut', false);
//        Session.set('badDeckChoose',false);
//    },
//    "click .addName" : function(evt, tmp){
//        var name = tmp.find('.deckname').value;
//        Meteor.call('addDeckName', Session.get('selectedDeck'), name);
//    }
//    ,
//    "click .confirmDeckName" : function(evt, tmp){
//        console.log(Session.get('selectedDeck'));
//        console.log(Session.get("SelectedDeckName"));
//
//        _Deck.update(
//            {_id : new Mongo.ObjectID(Session.get('selectedDeck'))},
//            { $set :
//            {
//                title : Session.get("SelectedDeckName"),
//                titleID : Session.get("SelectedDeckNameID")
//            }
//            }
//        )
//    }
//});
//Template.deckPopOut.onRendered(function(){
//
//});
//Template.deckPopOut.onCreated(function(){
//    var instance = this;
//    this.autorun(function(){
//        instance.subscribe('joinCards' , Session.get('selectedDeck'));
//    });
//});


//,
//mainPictureOption1 : function(){
//
//    var selected = _SelectNameDeckFieldCards.find(
//        {
//            name : this.name,
//            mainPicture : true
//        }).fetch();
//    if(selected.length){
//        return true;
//    }
//
//},
//mainPictureOption2 : function(){
//    var selected = _SelectNameDeckFieldCards.find(
//        {
//            $or : [ {mainPicture : true},
//                {smallPicture1 : true, name : this.name},
//                {smallPicture2 : true, name : this.name}
//            ]
//        }).fetch();
//    if(selected.length){
//        return true;
//    }
//    return false;
//},
//smallPicture1Option1 : function(){
//    var selected = _SelectNameDeckFieldCards.find(
//        {
//            name : this.name,
//            smallPicture1 : true
//        }).fetch();
//    if(selected.length){
//        return true;
//    }
//},
//smallPicture1Option2 : function(){
//    var selected = _SelectNameDeckFieldCards.find(
//        {
//            $or : [ {mainPicture : true, name : this.name},
//                {smallPicture1 : true},
//                {smallPicture2 : true, name : this.name}
//            ]
//        }).fetch();
//    if(selected.length){
//        return true;
//    }
//    return false;
//},
//smallPicture2Option1 : function(){
//    var selected = _SelectNameDeckFieldCards.find(
//        {
//            name : this.name,
//            smallPicture2 : true
//        }).fetch();
//    if(selected.length){
//        return true;
//    }
//},
//smallPicture2Option2 : function(){
//    var selected = _SelectNameDeckFieldCards.find(
//        {
//            $or : [ {mainPicture : true, name : this.name},
//                {smallPicture1 : true, name : this.name},
//                {smallPicture2 : true},
//            ]
//        }).fetch();
//    if(selected.length){
//        return true;
//    }
//    return false;
//}


//Template.cards.events({
//    'click .removeCard' : function(evt, tmp){
//        _DeckNamesCards.remove({ _id : this._id});
//    },
//    'click .mainCard' : function(evt, tmp){
//        _DeckNamesCards.update(
//            {_id : this._id},
//            {$set : {mainPicture : true}}
//        )
//    },
//    'click .mainCardRemove' : function(evt, tmp){
//        _DeckNamesCards.update(
//            {_id : this._id},
//            {$set : {mainPicture : false}}
//        )
//    },
//    'click .smallPic1' : function(evt, tmp){
//        _DeckNamesCards.update(
//            {_id : this._id},
//            {$set : {smallPicture1 : true}}
//        )
//    },
//    'click .smallPicture1Remove' : function(evt, tmp){
//        _DeckNamesCards.update(
//            {_id : this._id},
//            {$set : {smallPicture1 : false}}
//        )
//    },
//    'click .smallPic2' : function(evt, tmp){
//        _DeckNamesCards.update(
//            {_id : this._id},
//            {$set : {smallPicture2 : true}}
//        )
//    },
//    'click .smallPicture2Remove' : function(evt, tmp){
//        _DeckNamesCards.update(
//            {_id : this._id},
//            {$set : {smallPicture2 : false}}
//        )
//    }
//
//});


//,
//getTheDeckRankings : function(type, format) {
//    _Meta.remove({});
//    var format = ["Modern", "Standard", "Vintage", "Legacy"];
//    var type = ["Aggro", "Combo", "Control"];
//
//
//    for (var i = 0; i < format.length; i++) {
//        for (var j = 0; j < type.length; j++) {
//            var deckTypesID = [];
//            _DeckNames.find({
//                format: format[i],
//                type: type[j]
//            }).forEach(function (deck) {
//                deckTypesID.push(deck._id);
//                _Meta.insert({
//                    _id: deck._id,
//                    type: type[j],
//                    format: format[i],
//                    colors : deck.colors
//                });
//            });
//
//            _Meta.find({}).forEach(function (deckType) {
//                var name = _DeckNames.findOne({deckName_id: deckType._id}, {sort: {vote: 1}});
//                _Meta.update(
//                    {_id: deckType._id},
//                    {$set: {name: name.name}}
//                )
//            });
//            _Deck.find({titleID: {$in: deckTypesID}}).forEach(function (deck) {
//                _Meta.update(
//                    {_id: deck.titleID},
//                    {$inc: {quantity: 1}}
//                )
//            });
//
//            _Meta.find({}).forEach(function (deck) {
//                var percentage = PrettifyFormatNum2Decimals(deck.quantity / _Deck.find({}).count());
//                _Meta.update({_id: deck._id},
//                    {
//                        $set: {
//                            percentage: percentage
//                        }
//                    }
//                )
//            });
//
//
//            _Meta.find({}).forEach(function (deck) {
//
//                var mainPicture = _DeckNamesCards.findOne({
//                    deckName_id: deck._id,
//                    mainPicture: true
//                });
//
//                if (mainPicture) {
//                    mainPicture = mainPicture.name;
//                } else {
//                    mainPicture = "missing";
//                }
//
//                var smallPicture1 = _DeckNamesCards.findOne({
//                    deckName_id: deck._id,
//                    smallPicture1: true
//                });
//                if (smallPicture1) {
//                    smallPicture1 = smallPicture1.name;
//                } else {
//                    smallPicture1 = "missing";
//                }
//
//
//                var smallPicture2 = _DeckNamesCards.findOne({
//                    deckName_id: deck._id,
//                    smallPicture2: true
//                });
//                if (smallPicture2) {
//                    smallPicture2 = smallPicture2.name;
//                } else {
//                    smallPicture2 = "missing";
//                }
//                _Meta.update({_id: deck._id},
//                    {
//                        $set: {
//                            mainPicture: mainPicture,
//                            smallPicture1: smallPicture1,
//                            smallPicture2: smallPicture2
//                        }
//                    }
//                );
//
//            });
//        }
//    }
//}

//artifact : function(_deckID){
//    var names = [];
//    _JoinExampleCards.find({creature : false, artifact : true}).forEach(function(e){names.push(e.name);});
//    return _DeckCards.find({_deckID : _deckID, sideboard : false, name : {$in : names}});
//}, artifactQuantity : function(_deckID){
//    var options = { creature : false, artifact : true};
//    return getQuantity(options, false, _deckID);
//}, creature : function(_deckID){
//    var names = [];
//    _JoinExampleCards.find({creature : true}).forEach(function(e){names.push(e.name);});
//    return _DeckCards.find({_deckID : _deckID, sideboard : false, name : {$in : names}});
//}, creatureQuantity : function(_deckID){
//    var options = { creature : true};
//    return getQuantity2(options, false, _deckID);
//}, planeswalker : function(_deckID){
//    var names = [];
//    _JoinExampleCards.find({planeswalker : true}).forEach(function(e){names.push(e.name);});
//    return _DeckCards.find({_deckID : _deckID, sideboard : false, name : {$in : names}});
//}, planeswalkerQuantity : function(_deckID){
//    var options = { planeswalker : true};
//    return getQuantity2(options, false, _deckID);
//}, enchantment : function(_deckID){
//    var names = [];
//    _JoinExampleCards.find({enchantment : true, creature : false, artifact : false}).forEach(function(e){names.push(e.name);});
//    return _DeckCards.find({_deckID : _deckID, sideboard : false, name : {$in : names}});
//}, enchantmentQuantity : function(_deckID){
//    var options = { enchantment : true, creature : false, artifact : false};
//    return getQuantity2(options, false, _deckID);
//}, instant : function(_deckID){
//    var names = [];
//    _JoinExampleCards.find({instant : true}).forEach(function(e){names.push(e.name);});
//    return _DeckCards.find({_deckID : _deckID, sideboard : false, name : {$in : names}});
//}, instantQuantity : function(_deckID) {
//    var options = {instant : true};
//    return getQuantity2(options, false, _deckID);
//}, sorcery : function(_deckID){
//    var names = [];
//    _JoinExampleCards.find({sorcery : true}).forEach(function(e){names.push(e.name);});
//    return _DeckCards.find({_deckID : _deckID, sideboard : false, name : {$in : names}});
//}, sorceryQuantity : function(_deckID){
//    var options = { sorcery : true};
//    return getQuantity2(options, false, _deckID);
//}, land : function(_deckID){
//    var names = [];
//    _JoinExampleCards.find({land : true, creature : false, artifact : false}).forEach(function(e){names.push(e.name);});
//    return _DeckCards.find({_deckID : _deckID, sideboard : false, name : {$in : names}});
//}, landQuantity : function(_deckID){
//    var options = { land : true, creature : false, artifact : false};
//    return getQuantity2(options, false, _deckID);
//}, sideboard : function(_deckID){
//    var names = [];
//    _JoinExampleCards.find({}).forEach(function(e){names.push(e.name);});
//    return _DeckCards.find({_deckID : _deckID, sideboard : true, name : {$in : names}});
//}, sideboardQuantity: function (_deckID) {
//    var options = {};
//    return getQuantity2(options, true, _deckID);
//},

//findDeckByType : function(){
//    var deckNameIDs = _DeckNames.find({}).fetch();
//    var deckWithoutName = _Deck.find({title: ""}).fetch();
//
//    var results = [];
//
//    for(var i = 0; i< deckNameIDs.length ; i++)
//    {
//        var decksResults = [];
//        var deckNameIDCards = [];
//        _DeckNamesCards.find({
//            deckName_id : deckNameIDs[i]._id
//        }).forEach(function(card){
//            deckNameIDCards.push(card.name);
//        });
//        var deckNameIDCardsWithoutLands = getCardFromArrayWithoutLands(deckNameIDCards);
//
//        for(var j = 0 ; j < deckWithoutName.length ; j++){
//
//            var result =_DeckCards.find({
//                deck_id : deckWithoutName[j]._id._str,
//                sideboard : false,
//                name : {$in : deckNameIDCardsWithoutLands}
//            }).fetch();
//
//            var percentage = PrettifyFormatNum2Decimals(result.length/deckNameIDCardsWithoutLands.length);
//
//            if(percentage > 70)
//            {
//                decksResults.push({
//                    decknameID : deckWithoutName[j]._id,
//                    percentage : percentage
//                });
//            }
//        }
//        if(decksResults.length != 0)
//        {
//            var mostVoted =_DeckNames.findOne({deckName_id : deckNameIDs[i]._id}, {sort : {vote : 1}});
//
//            results.push(
//                {
//                    deckNameID : deckNameIDs[i]._id,
//                    name : mostVoted.name,
//                    decksResults: decksResults
//                }
//            );
//        }
//    }
//    return results;
//},


//var meteor_root = Npm.require('fs').realpathSync( process.cwd() + '/../' );
//var application_root = Npm.require('fs').realpathSync( meteor_root + '/../' );
//
//// if running on dev mode
//if( Npm.require('path').basename( Npm.require('fs').realpathSync( meteor_root + '/../../../' ) ) == '.meteor' ){
//    application_root =  Npm.require('fs').realpathSync( meteor_root + '/../../../../' );
//}
//
//addDeckName = function(_selectedDeckID, name){
//    var format = _Deck.findOne({_id : _selectedDeckID}).format;
//
//    var cards = [];
//
//    _DeckCards.find({_deckID : _selectedDeckID, sideboard : false}).forEach(function(card){
//        cards.push(card.name);
//    });
//
//    var _deckNameID = _DeckNames.insert({
//        format : format,
//        name : name
//    });
//
//    CardsData.find(
//        {name : {$in : cards},
//            land : false
//        }).forEach(function(card){
//            _DeckNamesCards.insert({ _deckNameID : _deckNameID,
//                name : card.name
//            });
//        });
//
//    _Deck.update({_id : _selectedDeckID},{
//        $set : {name : name}
//    });
//}

//function getOneDeckRank(_deckWithoutNameID){
//    var _deckNames = _DeckNames.find({}).fetch();
//    var results = [];
//    for(var j = 0; j < _deckNames.length; j++)
//    {
//        var _deckNameID = _deckNames[j]._id;
//
//        var cardDeckNames = [];
//        _DeckNamesCards.find({_deckNameID : _deckNameID}).forEach(function(card){
//            cardDeckNames.push(card.name);
//        });
//
//        var matches = getMatchesAndNonMatches(_deckWithoutNameID, cardDeckNames, _deckNameID);
//        var value = prettifyPercentage((matches.positive.length)/cardDeckNames.length,2);
//        var name = _DeckNames.findOne({_id : _deckNameID}).name;
//
//        if(value!==0){
//            results.push({
//                value : value,
//                name : name,
//                deckNameID : _deckNameID._id,
//                matches : matches
//            });
//        }
//    }
//    results.sort(function(a, b){return b.value - a.value});
//    results = results.slice(0,3);
//    var finalResults = {id : _deckWithoutNameID, results : results};
//    return finalResults;
//}

//getDeckRanks = function(){
//    var _deckNames = _DeckNames.find({}).fetch();
//    var _deckWithoutNames = _Deck.find({$or : [{title: ""}, {title : null}]}).fetch();
//    var finalResults = [];
//    for(var i = 0; i < _deckWithoutNames.length; i++){
//        var _deckWithoutNameID = _deckWithoutNames[i]._id;
//        var results = [];
//        for(var j = 0; j < _deckNames.length; j++)
//        {
//            var _deckNameID = _deckNames[j]._id;
//
//            //get the list of cards
//            var cardDeckNames = [];
//            _DeckNamesCards.find({deckName_id : _deckNameID}).forEach(function(card){
//                cardDeckNames.push(card.name);
//            });
//
//            var matches = getMatchesAndNonMatches(_deckWithoutNameID, cardDeckNames, _deckNameID);
//            var value = prettifyPercentage((matches.positive.length)/cardDeckNames.length, 2);
//            var deckName = _DeckNames.findOne({deckName_id : _deckNameID}).name;
//            if(value!==0){
//                results.push({
//                    value : value,
//                    deckName : deckName,
//                    deckNameID : _deckNameID._id,
//                    matches : matches
//                });
//            }
//        }
//
//        results.sort(function(a, b){return b.value - a.value});
//        results = results.slice(0,4);
//        finalResults.push({id : _deckWithoutNameID, results : results});
//    }
//    return finalResults;
//}

getLastEvents = function(){

    var result = request.getSync("http://magic.wizards.com/en/content/deck-lists-magic-online-products-game-info", {
        encoding: null
    });
    buffer = result.body;
    var $ = cheerio.load(buffer);
    fields = $('.article-item');

    var events = [];
    //download the data of each deck
    fields.each(function(i, elem){
        var httpAddress = "http://magic.wizards.com" + $(elem).find('.title a').attr('href');
        var event = $(elem).find('.title a').html();
        var dateAndNumber = $(elem).find('.section a').html();
        var eventInfo = {};
        eventInfo = getEventsInformation(event, httpAddress, dateAndNumber);
        events.push(eventInfo);
    });

    //check if the event already exists and store if not
    for(var i = 0; i < events.length; i++){
        if(_Event.find({_eventNumber : events[i]._eventNumber}, {limit : 1}).count()===0){
            if(events[i].type === "sealed") {
                _Event.insert({
                    _eventNumber: events[i]._eventNumber,
                    date: events[i].date,
                    _eventNumber: events[i]._eventNumber,
                    format : events[i].format,
                    type: events[i].type,
                    set: events[i].type,
                    boosterQuantity: events[i].type,
                    httpAddress : events[i].httpAddress
                });
            }else{
                _Event.insert({
                    _eventNumber: events[i]._eventNumber,
                    date: events[i].date,
                    _eventNumber: events[i]._eventNumber,
                    format : events[i].format,
                    type: events[i].type,
                    httpAddress : events[i].httpAddress
                });
            }
        }else{
            console.log("found it");
        }
    }
}

//
//getEventsInformation = function(event, httpAddress, dateAndNumber){
//    console.log(event);
//    //Patterns
//    var _eventNumberPatt = /#[0-9]*/;
//    var dataPatt = /(0[1-9]|1[012])[- \/.](0[1-9]|[12][0-9]|3[01])[- \/.](19|20)\d\d/;
//    var formatPatt = /standard|pauper|modern|legacy|vintage|sealed/i;
//    var typePatt = /daily|ptq|judge open|champs|champs|premier|mocs|block champ qual/i;
//    //var blockTypePatt = /(?:sealed )(\w*)/i;
//    var setPatt = /(?:\S+\s+){1}(\S+)/i;
//
//    var eventInformation = {};
//
//    eventInformation.format = event.match(formatPatt)[0].toLowerCase();
//    eventInformation.type = event.match(typePatt)[0].toLowerCase();
//    eventInformation._eventNumber = dateAndNumber.match(_eventNumberPatt)[0];
//    eventInformation.date = new Date(dateAndNumber.match(dataPatt)[0]);
//    eventInformation.httpAddress = httpAddress;
//    if( eventInformation.format == "sealed"){
//        eventInformation.set = event.match(setPatt)[1];
//        eventInformation.boosterQuantity = getEventQunantityOfBooters(httpAddress);
//    }
//    return eventInformation;
//}

//Router.route('/deck', function () {
//        this.layout('ApplicationLayout');
//        // render the Post template into the "main" region
//        // {{> yield}}
//        this.render('decks');
//
//        // render the PostAside template into the yield region named "aside"
//        // {{> yield "aside"}}
//        this.render('PostAside', {to: 'aside'});
//
//        // render the PostFooter template into the yield region named "footer"
//        // {{> yield "footer"}}
//        this.render('PostFooter', {to: 'footer'});
//});

//Router.route('/', function () {
//    this.layout('ApplicationLayout');
//
//    // render the Post template into the "main" region
//    // {{> yield}}
//    this.render('Post');
//
//    // render the PostAside template into the yield region named "aside"
//    // {{> yield "aside"}}
//    this.render('PostAside', {to: 'aside'});
//
//    // render the PostFooter template into the yield region named "footer"
//    // {{> yield "footer"}}
//    this.render('PostFooter', {to: 'footer'});
//});


//Router.route('home', {
//        //name : '',
//        path: '/',
//        //controller : '',
//        template : 'homeTemplate',
//        yieldRegions : {},
//        subscriptions: function(){},
//        layoutTemplate : 'ApplicationLayout',
//        waitOn : function(){
//        return[
//                Meteor.subscribe('deck', function(){
//                    console.log('deck Loaded');
//                }),
//                Meteor.subscribe('event', function(){
//                    console.log('event Loaded');
//                }),
//                Meteor.subscribe('joinCards', Session.get('selectedDeck'), function(){
//                    console.log('joinCards Loaded');
//                    Session.set('deckCardsLoaded', true);
//                })
//            ]
//        }
//    //,
//    //data: function(){},
//    //onRun: function () {},
//    //onRerun: function () {},
//    //onBeforeAction: function () {},
//    //onAfterAction: function () {},
//    //onStop: function () {},
//    //action : function(){}
//});

//Template.dropDownMenu.rendered = function(){
//
//    var $menu = $(".list-group");
//
//    // jQuery-menu-aim: <meaningful part of the example>
//    // Hook up events to be fired on menu row activation.
//    $menu.menuAim({
//        activate: activateSubmenu,
//        deactivate: deactivateSubmenu
//    });
//    // jQuery-menu-aim: </meaningful part of the example>
//    // jQuery-menu-aim: the following JS is used to show and hide the submenu
//    // contents. Again, this can be done in any number of ways. jQuery-menu-aim
//    // doesn't care how you do this, it just fires the activate and deactivate
//    // events at the right times so you know when to show and hide your submenus.
//    function activateSubmenu(row) {
//        var $row = $(row),
//            submenuId = $row.data("submenuId"),
//            $submenu = $("#" + submenuId),
//            height = $menu.outerHeight() + 1,
//            width = $menu.outerWidth() -2;
//        // Show the submenu
//        $submenu.css({
//            display: "block",
//            top: "-1px",
//            left: width,  // main should overlay submenu
//            height: height  // padding for main dropdown's arrow
//        });
//        // Keep the currently activated row's highlighted look
//        $row.find("a").addClass("maintainHover");
//    }
//
//    function deactivateSubmenu(row) {
//        var $row = $(row),
//            submenuId = $row.data("submenuId"),
//            $submenu = $("#" + submenuId);
//        // Hide the submenu and remove the row's highlighted look
//        $submenu.css("display", "none");
//        $row.find("a").removeClass("maintainHover");
//    }
//
//    // Bootstrap's dropdown menus immediately close on document click.
//    // Don't let this event close the menu if a submenu is being clicked.
//    // This event propagation control doesn't belong in the menu-aim plugin
//    // itself because the plugin is agnostic to bootstrap.
//
//    $(".dropdown li").click(function(e) {
//        e.stopPropagation();
//    });
//
//    $(document).click(function() {
//        // Simply hide the submenu on any click. Again, this is just a hacked
//        // together menu/submenu structure to show the use of jQuery-menu-aim.
//        $(".dropdownPop .popover2").css("display", "none");
//        $("a.maintainHover").removeClass("maintainHover");
//    });
//};


$('.button-checkbox').each(function () {
        // Settings
        var $widget = $(this),
            $button = $widget.find('button'),
            $checkbox = $widget.find('input:checkbox'),
            color = $button.data('color'),
            settings = {
                on: {
                    icon: 'glyphicon glyphicon-check'
                },
                off: {
                    icon: 'glyphicon glyphicon-unchecked'
                }
            };

        // Event Handlers
        $button.on('click', function () {
            $checkbox.prop('checked', !$checkbox.is(':checked'));
            $checkbox.triggerHandler('change');
            updateDisplay();
        });
        $checkbox.on('change', function () {
            updateDisplay();
        });

        // Actions
        function updateDisplay() {
            var isChecked = $checkbox.is(':checked');

            // Set the button's state
            $button.data('state', (isChecked) ? "on" : "off");

            // Set the button's icon
            $button.find('.state-icon')
                .removeClass()
                .addClass('state-icon ' + settings[$button.data('state')].icon);

            // Update the button's color
            if (isChecked) {
                $button
                    .removeClass('btn-default')
                    .addClass('btn-' + color + ' active');
            }
            else {
                $button
                    .removeClass('btn-' + color + ' active')
                    .addClass('btn-default');
            }
        }

         //Initialization
        function init() {

            updateDisplay();

            // Inject the icon if applicable
            if ($button.find('.state-icon').length === 0) {
                $button.prepend('<i class="state-icon ' + settings[$button.data('state')].icon + '"></i>');
            }
        }
        init();
    });


            var deckNames = _DeckNames.find({format : "modern"}).map(function(deckName){ return deckName.name});
            var date = getWeekStartAndEnd();
            var weekStart = new Date(date.weekStart);
            var weekEnd = new Date(date.weekEnd);

            var metaValues = _MetaValues.find({format: "modern"}, {sort: {weekDate: 1}}).fetch();

            var weeksTotal = [];
            var total = 0;
            var total2 = 0;

            for(var i = 0; i < metaValues.length; i++) {
                console.log(metaValues[i].weekDate);

                total += metaValues[i].type.daily3_1.deckTotal;
                total += metaValues[i].type.daily4_0.deckTotal;
                total += metaValues[i].type.ptqTop8.deckTotal;
                total += metaValues[i].type.ptqTop9_16.deckTotal;
                total += metaValues[i].type.ptqTop17_32.deckTotal;
                weeksTotal.push(total);
                if(i > metaValues.length -3 && total2 == 0){
                    total2 = total;
                }

            }

            var results2 = [];
            var results = [];
            for(var i = 0; i < deckNames.length; i++){
                var quantity = 0;
                var quantity2 = 0;
                var bars = [];
                for(var j = 0; j < metaValues.length; j++) {
                    quantity += metaValues[j].type.daily3_1.decks[deckNames[i]];
                    quantity += metaValues[j].type.daily4_0.decks[deckNames[i]];
                    quantity += metaValues[j].type.ptqTop8.decks[deckNames[i]];
                    quantity += metaValues[j].type.ptqTop9_16.decks[deckNames[i]];
                    quantity += metaValues[j].type.ptqTop17_32.decks[deckNames[i]];
                    if(j > metaValues.length -3 && quantity2 == 0){
                        quantity2 = quantity;
                    }
                    bars.push({percent : prettifyPercentage((quantity/weeksTotal[j]), 2), week : metaValues[j].weekDate});
                }

                bars = bars.slice(bars.length-6,bars.length);
                var barColors = [];

                for(var k = 0; k < bars.length -1; k++){
                    var change = (bars[k+1].percent - bars[k].percent).toFixed(2);
                    var item = {};
                    item.week = bars[k+1].week;
                    item.change = change;
                    item.value = bars[k+1].percent;
                    if(change < 0){
                        item.color = "red";
                    }else if(change > 0){
                        item.color = "green";
                    }else{
                        item.value = 0;
                        item.color = "gray";
                    }
                    barColors.push(item);
                }
                var weekChange = (bars[bars.length-1].percent - bars[bars.length-2].percent).toFixed(2);
                results.push({name : deckNames[i], percent : parseFloat(
                    prettifyPercentage((quantity/total), 2)), quantity : quantity, bars : barColors, weekChange : weekChange});
                results2.push({name : deckNames[i], percent : parseFloat(
                    prettifyPercentage((quantity2/total2), 2)), quantity : quantity2});
            }
            weekStart.setDate(weekStart.getDate() - 7);
            weekEnd.setDate(weekEnd.getDate() - 7);

            results.sort(function(a, b){return b.percent - a.percent});
            results2.sort(function(a, b){return b.percent - a.percent});

            var oldPosition = {};
            for(var i = 0; i < results2.length; i++){
                oldPosition[results2[i].name] = i;
            }

            for(var i = 0; i < results.length; i++){
                var change = oldPosition[results[i].name] - i;

                if(change > 0){
                    results[i].upDown = "up";
                }else if(change < 0){
                    results[i].upDown = "down";
                }else{
                    results[i].upDown = "neutral";
                }
                results[i].change = Math.abs(change);
            }
            results.sort(function(a, b){return Math.abs(b.weekChange) - Math.abs(a.weekChange)});
            results = results.splice(0, 20);

            return results;

            //+++++++++++++++++++++++++
            //metaTable               +
            //+++++++++++++++++++++++++
            Template.MENU_deckNames.onRendered(function(){
            //Menu First Level

              var $menuOne = $(".one");

              $menuOne.menuAim({
                activate: activateSubmenuOne,
                deactivate: deactivateSubmenuOne,
                exitMenu : exitMenuOne,
                enter : enterOne,
                exit : exitOne
              });

              function activateSubmenuOne(row) {
                var $row = $(row);
                if($(row).hasClass("parent") && $(row).hasClass("level0") )
                {
                  var $next_menu = $row.find("ul:first-child");
                  $(".is-active").stop().removeClass("is-active");
                  $row.addClass("is-active");
                  $(".superMenu").stop().animate(
                      {width: 400}, 200);
                }
                $row.addClass("is-hovered");
              }

              function deactivateSubmenuOne(row) {
                var $row = $(row);
                //setTimeout(function() {
                //      $row.stop().removeClass("is-active");
                //    },
                //    200
                $(".superMenu").stop().animate(
                    {width: 200}, 200);
                $row.removeClass("is-active");
              }

              function exitMenuOne(menu){
                setTimeout(function() {
                      $row.stop().removeClass("is-active");
                    },
                    200
                );
              }

              function enterOne(row){
                var $row = $(row);
                $row.addClass("is-hovered");
              }



              function exitOne(row){
                var $row = $(row);
                $row.removeClass("is-hovered");
              }

            //Menu Second Level

              var $menuTwo = $(".two");

              $menuTwo.menuAim({
                activate: activateSubmenuTwo,
                deactivate: deactivateSubmenuTwo,
                exitMenu : exitMenuTwo,
                enter : enterTwo,
                exit : exitTwo
              });

              function activateSubmenuTwo(row) {
                var $row = $(row);
                if($(row).hasClass("parent"))
                {
                  $(".superMenu").stop().animate(
                      {width: 600}, 200);
                }
                $row.addClass("is-active");
              }
              function deactivateSubmenuTwo(row) {
                var $row = $(row);
                setTimeout(function() {
                      $row.stop().removeClass("is-active");
                    },
                    200
                );
                $(".superMenu").stop().animate(
                    {width: 400}, 200);
              }
              function exitMenuTwo(menu){
                return true;
              }
              function enterTwo(row){
                var $row = $(row);
                $row.addClass("is-hovered");
              }
              function exitTwo(row){
                var $row = $(row);
                $row.removeClass("is-hovered");
              }


            //Menu third Level

              var $menuThree = $(".three");

              $menuThree.menuAim({
                activate: activateSubmenuThree,
                deactivate: deactivateSubmenuThree,
                exitMenu : exitMenuThree,
                enter : enterThree,
                exit : exitThree
              });
              function activateSubmenuThree(row) {
                $row.addClass("is-active");
              }
              function deactivateSubmenuThree(row) {
                $row.remove("is-active");
              }
              function exitMenuThree(menu){
                return true;
              }
              function enterThree(row){
                var $row = $(row);
                $row.addClass("is-hovered");
              }
              function exitThree(row){
                var $row = $(row);
                $row.removeClass("is-hovered");
              }
            });

Template.testMenu.helpers({
    siteColor : function(){
        return Session.get("siteColor");
    }
});

Template.testMenu.events({

});

Template.testMenu.rendered = function(){
    makeSuperMenu();

};


Template.topMenuStatic.rendered = function(){
    var template = this;
    this.findAll("a").forEach( function(element){
        var id = element.id;
        var name = id.substring(0, id.length-4);


        $(element).css("color", Session.get(name));
        $(element).hover(function () {
                $(this).css({"border-top-color": Session.get(name),
                    "border-top-width":"2px",
                    "border-top-style":"solid"})
            },
            function () {
                $(this).css({"border-top-color": "transparent",
                    "border-top-width":"2px",
                    "border-top-style":"solid"})
            }

        );
    });
    //var menuOffset = $('.top-nav')[0].offsetTop; // replace #menu with the id or class of the target navigation

    $(document).bind('ready scroll', function() {
        var docScroll = $(document).scrollTop();
        if (docScroll >= 155) {
            if (!$('#headerBlock .headerStatic').hasClass('headerStatic-is-active')) {
                $('#headerBlock .headerStatic').addClass('headerStatic-is-active').css({
                    top: '-146px',
                    display: 'block'
                }).stop().animate({
                    top: 0
                }, 250);
            }
        } else if (docScroll < 155){
            if ($('#headerBlock .headerStatic').hasClass('headerStatic-is-active')) {
                $('#headerBlock .headerStatic').stop().animate({
                    top: "-86px"
                }, 250, function(){
                    $(this).removeClass('headerStatic-is-active').removeAttr('style');
                });
            }
        }

    });
};

//++++++++++++++++++++
//IRONdeckNaming     +
//++++++++++++++++++++

Template.IRONdeckNaming.onCreated(function(){
    this.subscribe('decknames');
    this.subscribe('counters');
});

Template.IRONdeckNaming.helpers({
    showDeckPopOut : function(){
        return Session.get('showDeckPopOut');
    },
    showdeckPopOutOption : function(){
        return Session.get('showDeckPopOutOption');
    }

});

Template.IRONdeckNaming.onCreated(function(){
    var instance = this;
    this.autorun(function(){
        //instance.subscribe('deck');
        //instance.subscribe('event');
    });
});


//+++++++++++++++++++++
//deckNames           +
//+++++++++++++++++++++


Template.deckNames.helpers({
    names : function() {
        return _SelectedNameDeckNames.find({deckName_id : Session.get('selectedIdDeck')});
    },
    deckCardNameRest : function() {
        return _DeckNames.find({deckName_id : this._id}, {sort : {vote : 1}, skip : 1});
    }
});
Template.deckNames.events({
    'click .editESPAN' : function(evt, tmp)
    {
        $(evt.target)[0].style.display="none";
        $(evt.target).next()[0].value=$(evt.target).text();
        $(evt.target).next()[0].style.display="block";
        $(evt.target).next()[0].focus();
    },
    'blur .editINPUT' : function(evt, tmp)
    {
        var temp1 = $(evt.target).prev().text();
        var temp2 = $(evt.target).val();

        if(temp1 != temp2)
        {
            _DeckNames.update(
                {_id : this._id},
                {
                    $set : {
                        name: $(evt.target).val()
                    }
                });
        }
        $(evt.target)[0].style.display="none";
        $(evt.target).prev()[0].style.display="block";
    },
    'click .removeName' : function(evt,tmp)
    {
        _DeckNames.remove( {_id : this._id});
    }
});



//++++++++++++++++++++
//formatOptions      +
//++++++++++++++++++++

Template.formats.events({
    'click .selectFormat' : function(evt, tmp){
        if($(evt.target).text() == "No Format Yet")
        {
            Session.set('selectedFormat', null);
        }else{
            Session.set('selectedFormat', $(evt.target).text());
        }

    },
    'click .createOneMoreDeck' : function(evt, tmp){

    }
});

//++++++++++++++++++++++
//cardsTop             +
//++++++++++++++++++++++

Template.cardsTop.helpers({

});
Template.cardsTop.events({

});

//++++++++++++++++++++++++++
//Search                   +
//++++++++++++++++++++++++++

Template.search.helpers({
    search : function(query, sync, callback) {
        Meteor.call('search', query, {}, function(err, res) {
            if (err) {
                console.log(err);
                return;
            }
            callback(res.map(function(it){
                return { value : it.name};
            }));
        });
    }
});

Template.search.onRendered(function () {
    Meteor.typeahead.inject();
});

Template.search.events({
    'click .addCard' : function(evt, tmp){
        _DeckNamesCards.insert({
            deckName_id : Session.get('selectedIdDeck'),
            name : tmp.find('.tt-input').value,
            type : 2
        })
    }
});

//+++++++++++++++++++++++++
//nameDeck                +
//+++++++++++++++++++++++++

Template.nameDeck.helpers({
    goodDecks : function(){
        return Session.get('thing');
    }
});

//+++++++++++++++++++++++++
//deckBlock               +
//+++++++++++++++++++++++++

Template.deckBlock.events({
    "click .noNameDeck" : function(evt, tmp){
        var deckNameID = Template.parentData(0).deckNameID;
        var temp = $.trim($(tmp.find(".nomeDoDeck")).text());
        Session.set('SelectedDeckNameID', deckNameID);
        Session.set('SelectedDeckName', temp);
        Session.set('badDeckChoose', false);
        Session.set("selectedDeck", this.decknameID._str);
        Session.set('showDeckPopOut', true);
    }
});

//+++++++++++++++++++++++++
//nameCardTypeRows        +
//+++++++++++++++++++++++++

Template.nameCardTypeRows.helpers({
    showDeckPopOut : function(){

    },
    cardData : function(){
        return _JoinCardsData.findOne({name : this.name});
    }
});
Template.nameCardTypeRows.events({

});



////+++++++++++++++++++++++++++
////deckWithoutGoodPercentage +
////+++++++++++++++++++++++++++
//
//Template.deckWithoutGoodPercentage.helpers({
//    badDecks : function(){
//        return Session.get('badDecks');
//    }
//
//});
//
//Template.deckWithoutGoodPercentage.events({
//    "click .noNameDeck" : function(evt, template){
//        Session.set("selectedDeck", this._id._str);
//        Session.set('showDeckPopOut', true);
//        Session.set('badDeckChoose', true);
//    }
//});
//
//Template.deckWithoutGoodPercentage.onRendered(function(){
//
//});
//
//Template.deckWithoutGoodPercentage.onCreated(function(){
//
//});
//


updateMeta = function(){
    var format = 'modern';

    var startDate = new Date();
    startDate.setSeconds(0);
    startDate.setHours(0);
    startDate.setMinutes(0);
    startDate.setMilliseconds(0);

    var dateMidnight = new Date(startDate);
    dateMidnight.setHours(23);
    dateMidnight.setMinutes(59);
    dateMidnight.setSeconds(59);
    dateMidnight.setMilliseconds(999);

    _MetaDate.update({
        date : startDate,
        format : format
    },
    {
        $setOnInsert :  {
                        date : startDate,
                        format : format
                        }
    },
        {upsert : true}
    );

    var _metaDateID = _MetaDate.findOne({
        date : startDate,
        format : format
    })._id;


    var names = _DeckNames.find({format : format}).fetch();
    var decksCount = _Deck.find({format : format}).count();

    for(var i = 0; i < names.length; i++) {
        var metaInfo = {};
        var name = names[i].name;
        var deckCount = _Deck.find({format: format, name: name}).count();
        metaInfo._metaDateID = _metaDateID;
        metaInfo.percent = parseFloat(prettifyPercentage(deckCount / decksCount, 2));
        metaInfo.name = name;
        metaInfo.format = format;

        _MetaValues.update({
            _metaDateID : metaInfo._metaDateID,
            name : metaInfo.name,
            format : metaInfo.format
            },
            {
                $set : {percent : metaInfo.percent},
                $setOnInsert : metaInfo
            },
            {upsert : true}
        );
    }
}

,
    meta : function() {
        var cards = _cardsMetaValues.find({format: "modern"}).fetch();
        var cardsValues = [];
        for (var i = 0; i < cards.length; i++) {
            var total = 0;
            var totalMain = 0;
            var inDecks = 0;
            var inDecksSideboard = 0;
            var totalSideboard = 0;
            if (Session.get(SV_metaDaily3_1) == true) {
                if(cards[i].hasOwnProperty("daily3_1")){
                    total += cards[i].daily3_1.total;
                    if(cards[i].daily3_1.hasOwnProperty("inDecks")) {
                        inDecks += cards[i].daily3_1.inDecks;
                        totalMain += cards[i].daily3_1.totalMain;
                    }
                    if(cards[i].daily3_1.hasOwnProperty("inDecksSideboard")) {
                        inDecksSideboard += cards[i].daily3_1.inDecksSideboard;
                        totalSideboard += cards[i].daily3_1.totalSideboard;
                    }
                }
            }
            if (Session.get(SV_metaDaily4_0) == true) {
                if(cards[i].hasOwnProperty("daily4_0")){
                    total += cards[i].daily4_0.total;
                    if(cards[i].daily4_0.hasOwnProperty("inDecks")) {
                        inDecks += cards[i].daily4_0.inDecks;
                        totalMain += cards[i].daily4_0.totalMain;
                    }
                    if(cards[i].daily4_0.hasOwnProperty("inDecksSideboard")) {
                        inDecksSideboard += cards[i].daily4_0.inDecksSideboard;
                        totalSideboard += cards[i].daily4_0.totalSideboard;
                    }
                }
            }
            if (Session.get(SV_metaPtqTop8) == true) {
                if(cards[i].hasOwnProperty("ptqTop8")){
                    total += cards[i].ptqTop8.total;
                    if(cards[i].ptqTop8.hasOwnProperty("inDecks")) {
                        inDecks += cards[i].ptqTop8.inDecks;
                        totalMain += cards[i].ptqTop8.totalMain;
                    }
                    if(cards[i].ptqTop8.hasOwnProperty("inDecksSideboard")) {
                        inDecksSideboard += cards[i].ptqTop8.inDecksSideboard;
                        totalSideboard += cards[i].ptqTop8.totalSideboard;
                    }
                }
            }
            if (Session.get(SV_metaPtqTop9_16) == true) {
                if(cards[i].hasOwnProperty("ptqTop9_16")){
                    total += cards[i].ptqTop9_16.total;
                    if(cards[i].ptqTop9_16.hasOwnProperty("inDecks")) {
                        inDecks += cards[i].ptqTop9_16.inDecks;
                        totalMain += cards[i].ptqTop9_16.totalMain;
                    }
                    if(cards[i].ptqTop9_16.hasOwnProperty("inDecksSideboard")) {
                        inDecksSideboard += cards[i].ptqTop9_16.inDecksSideboard;
                        totalSideboard += cards[i].ptqTop9_16.totalSideboard;
                    }
                }
            }
            if (Session.get(SV_metaPtqTop17_32) == true) {
                if(cards[i].hasOwnProperty("ptqTop17_32")){
                    total += cards[i].ptqTop17_32.total;
                    if(cards[i].ptqTop17_32.hasOwnProperty("inDecks")) {
                        inDecks += cards[i].ptqTop17_32.inDecks;
                        totalMain += cards[i].ptqTop17_32.totalMain;
                    }
                    if(cards[i].ptqTop17_32.hasOwnProperty("inDecksSideboard")) {
                        inDecksSideboard += cards[i].ptqTop17_32.inDecksSideboard;
                        totalSideboard += cards[i].ptqTop17_32.totalSideboard;
                    }
                }
            }

            var totalCards = 0;
            var decksWithCard = 0;
            if(Session.get(SV_metaCardMetaSideboard) && Session.get(SV_metaCardMetaMain)){
                decksWithCard = total;
                totalCards = totalMain + totalSideboard;
            }else if(Session.get(SV_metaCardMetaMain)){
                decksWithCard = inDecks;
                totalCards = totalMain;
            }else if(Session.get(SV_metaCardMetaSideboard)){
                decksWithCard = inDecksSideboard;
                totalCards = totalSideboard;
            }
            cardsValues.push({name : cards[i].name, avg : Math.round((totalCards/decksWithCard)*100 )/100, percent : prettifyPercentage(decksWithCard/Session.get(SV_metaDecksLength), 2)});
        }
        cardsValues.sort(function(a, b){return b.percent - a.percent});
        Session.set(SV_metaCardLength, cardsValues.length);
        cardsValues = cardsValues.splice(Session.get(SV_metaCardListPagination),10);
        return cardsValues;
    },

//meta : function(){
   //     var deckNames = _DeckNames.find({format : "modern"}).map(function(deckName){ return deckName.name});
   //     var date = getWeekStartAndEnd();
   //     var weekStart = new Date(date.weekStart);
   //     var weekEnd = new Date(date.weekEnd);
   //
   //     var metaValues = _MetaValues.find({format: "modern"}, {sort: {weekDate: 1}}).fetch();
   //
   //     var weeksTotal = [];
   //     var total = 0;
   //     var total2 = 0;
   //
   //     for(var i = 0; i < metaValues.length; i++) {
   //         if (Session.get(SV_metaDaily3_1) == true && metaValues[i].type.hasOwnProperty("daily3_1")) {
   //             total += metaValues[i].type.daily3_1.deckTotal;
   //         }
   //         if (Session.get(SV_metaDaily4_0) == true && metaValues[i].type.hasOwnProperty("daily4_0")) {
   //             total += metaValues[i].type.daily4_0.deckTotal;
   //         }
   //         if (Session.get(SV_metaPtqTop8) == true && metaValues[i].type.hasOwnProperty("ptqTop8")) {
   //             total += metaValues[i].type.ptqTop8.deckTotal;
   //         }
   //         if (Session.get(SV_metaPtqTop9_16) == true && metaValues[i].type.hasOwnProperty("ptqTop9_16")) {
   //             total += metaValues[i].type.ptqTop9_16.deckTotal;
   //         }
   //         if (Session.get(SV_metaPtqTop17_32) == true && metaValues[i].type.hasOwnProperty("ptqTop17_32")) {
   //             total += metaValues[i].type.ptqTop17_32.deckTotal;
   //         }
   //         weeksTotal.push(total);
   //
   //         if(i > metaValues.length -3 && total2 == 0){
   //             total2 = total;
   //         }
   //
   //     }
   //
   //
   //     var results2 = [];
   //     var results = [];
   //     for(var i = 0; i < deckNames.length; i++){
   //         var quantity = 0;
   //         var quantity2 = 0;
   //         var bars = [];
   //         for(var j = 0; j < metaValues.length; j++) {
   //             if (Session.get(SV_metaDaily3_1) == true && metaValues[j].type.hasOwnProperty("daily3_1")) {
   //                 if(metaValues[j].type.daily3_1.decks.hasOwnProperty(deckNames[i])) {
   //                     quantity += metaValues[j].type.daily3_1.decks[deckNames[i]];
   //                 }
   //             }
   //             if (Session.get(SV_metaDaily4_0) == true && metaValues[j].type.hasOwnProperty("daily4_0")) {
   //                 if(metaValues[j].type.daily4_0.decks.hasOwnProperty(deckNames[i])) {
   //                     quantity += metaValues[j].type.daily4_0.decks[deckNames[i]];
   //                 }
   //             }
   //             if (Session.get(SV_metaPtqTop8) == true && metaValues[j].type.hasOwnProperty("ptqTop8")) {
   //                 if(metaValues[j].type.ptqTop8.decks.hasOwnProperty(deckNames[i])) {
   //                     quantity += metaValues[j].type.ptqTop8.decks[deckNames[i]];
   //                 }
   //             }
   //             if (Session.get(SV_metaPtqTop9_16) == true && metaValues[j].type.hasOwnProperty("ptqTop9_16")) {
   //                 if(metaValues[j].type.ptqTop9_16.decks.hasOwnProperty(deckNames[i])){
   //                     quantity += metaValues[j].type.ptqTop9_16.decks[deckNames[i]];
   //                 }
   //             }
   //             if (Session.get(SV_metaPtqTop17_32) == true && metaValues[j].type.hasOwnProperty("ptqTop17_32")) {
   //                 if(metaValues[j].type.ptqTop17_32.decks.hasOwnProperty(deckNames[i])) {
   //                     quantity += metaValues[j].type.ptqTop17_32.decks[deckNames[i]];
   //                 }
   //             }
   //
   //             if(j > metaValues.length -3 && quantity2 == 0){
   //                 quantity2 = quantity;
   //             }
   //             bars.push({percent : prettifyPercentage((quantity/weeksTotal[j]), 2), week : metaValues[j].weekDate});
   //
   //         }
   //         bars = bars.slice(bars.length-6,bars.length);
   //         var barColors = [];
   //
   //
   //         for(var k = 0; k < bars.length -1; k++){
   //             var change = (bars[k+1].percent - bars[k].percent).toFixed(2);
   //             var item = {};
   //             item.week = bars[k+1].week;
   //             item.change = change;
   //             item.value = bars[k+1].percent;
   //             if(change < 0){
   //                 item.color = "red";
   //             }else if(change > 0){
   //                 item.color = "green";
   //             }else{
   //                 item.value = 0;
   //                 item.color = "gray";
   //             }
   //             barColors.push(item);
   //         }
   //         results.push({name : deckNames[i], percent : parseFloat(
   //             prettifyPercentage((quantity/total), 2)), quantity : quantity, bars : barColors });
   //         results2.push({name : deckNames[i], percent : parseFloat(
   //             prettifyPercentage((quantity2/total2), 2)), quantity : quantity2});
   //     }
   //     weekStart.setDate(weekStart.getDate() - 7);
   //     weekEnd.setDate(weekEnd.getDate() - 7);
   //
   //     results.sort(function(a, b){return b.percent - a.percent});
   //     results2.sort(function(a, b){return b.percent - a.percent});
   //
   //     var oldPosition = {};
   //     for(var i = 0; i < results2.length; i++){
   //         oldPosition[results2[i].name] = i;
   //     }
   //
   //     for(var i = 0; i < results.length; i++){
   //         var change = oldPosition[results[i].name] - i;
   //
   //         if(change > 0){
   //             results[i].upDown = "up";
   //         }else if(change < 0){
   //             results[i].upDown = "down";
   //         }else{
   //             results[i].upDown = "neutral";
   //         }
   //         results[i].change = Math.abs(change);
   //     }
   //     Session.set(SV_metaDecksLength, total);
   //
   //     results = results.splice(Session.get(SV_metaDeckListPagination), 20);
   //     return results;
   //
   //},

   Template.newMetaTable_COL.onRendered(function(){
       // to enable nested checkboxes use the following javascript.
       $(':checkbox, input[role="checkbox"]')
           .each(function () {
               var $checkbox = $(this),
                   checked = this.checked = $checkbox.is('[checked]'), // explicitly set "checked" property for elements with checked attribute
                   $ariaCheckbox, attributes;

               // Add aria-checked and checked attribute
               $checkbox.attr({
                   'role': 'checkbox',
                   'aria-checked': $checkbox.attr('aria-checked') || checked,
                   'checked': checked
               });
          });

            //maketheBoxes();
       //$(".bar").hover( function(){
       //        $container = $(".changePercentageBlock");
       //        $container.find(".value").text($(this).data("value"));
       //        $container.find(".change").text($(this).data("change"));
       //        $container.find(".week").text($(this).data("week"));
       //        //$container.appendTo('body');
       //        $container.show();
       //    }, function(){
       //        $container.hide();
       //    }
       //)
   });

           for(var i = 0; i< blocks.length; i++){
               if(blocks[i]=="artifact"){
                   var options = {creature : false, artifact : true};
                   var quantity = getQuantity2(options, false);
                   if(quantity > 0){types.push({name : "Artifact", quantity : quantity, options : options});}
               }


               else if(blocks[i]=="creature"){
                   var options = { creature : true};
                   var quantity = getQuantity2(options, false);
                   if(quantity > 0){types.push({name : "Creature", quantity : quantity, options : options})};
               }else if(blocks[i]=="enchantment"){
                   var options = {enchantment : true, creature : false, artifact : false};
                   var quantity = getQuantity2(options, false);
                   if(quantity > 0){types.push({name : "Enchantment", quantity : quantity, options : options})};
               }else if(blocks[i]=="instant"){
                   var options = {instant : true};
                   var quantity = getQuantity2(options, false);
                   if(quantity > 0){types.push({name : "Instant", quantity : quantity, options : options})};
               }else if(blocks[i]=="land"){
                   var options = {land : true, creature : false, artifact : false};
                   var quantity = getQuantity2(options, false);
                   if(quantity > 0){types.push({name : "Land", quantity : quantity, options : options})};
               }else if(blocks[i]=="planeswalker"){
                   var options = {planeswalker : true};
                       var quantity = getQuantity2(options, false);
                       if(quantity > 0){types.push({name : "Planeswalker", quantity : quantity, options : options})};
               }else if(blocks[i]=="sorcery"){
                   var options = {sorcery : true};
                   var quantity = getQuantity2(options, false);
                   if(quantity > 0){ types.push({name : "Sorcery", quantity : quantity, options : options})};
               }
           }

           Router.route('decks', {
               //name : '',
               path: '/decks/:format?/:archetype?/:deckSelected?',
               //controller : '',
               //template : 'homeTemplate',
               autoRender: false,
               //,
               //subscriptions: function(){},
               //layoutTemplate : 'ApplicationLayout'
               //,
               onBeforeAction : function(){
                   if(this.params.deckSelected){

                   }
                   this.next();
               },
               yieldRegions: {
                   //'PostAside': {to: 'aside'},
                   //'PostFooter': {to: 'footer'}
               },
               data: function(){
                   console.log("data");

                   console.log("Format:" +this.params.format);
                   console.log("archetype: " +this.params.archetype);
                   console.log("deckSelected " +this.params.deckSelected);



                   if(this.params.deckSelected != null){
                       Session.set(SV_decksSelectedDeckName, this.params.deckSelected.replace(/-/," "));
                   }

                   if(this.params.format != null){
                       Session.set(SV_decksSelectedFormat, this.params.format);
                   }
                   Session.set('siteColor', Session.get('deckCardName'));
               },
               action : function(){
                   console.log("action");
                   if( this.params.format == "modern" || this.params.format == "vintage" ||
                       this.params.format == "legacy" || this.params.format == "standard"){

                       if(this.params.deckSelected != null){
                           this.render("deckSelected", {to: 'decks'});
                       }else{
                           this.render("selectADeck", {to: 'decks'});
                       }
                   }else{
                       this.render("deckFP", {to: 'decks'});
                   }
                   this.render();
               },
               waitOn : function(){
                   console.log("waitOn");
                   var subscriptions = [];
                   subscriptions.push(Meteor.subscribe('event'));
                   subscriptions.push(Meteor.subscribe('images'));
                   subscriptions.push(Meteor.subscribe('event'));
                   subscriptions.push(Meteor.subscribe('deckplaylist'));

                   if(this.params.deckSelect != null) subscriptions.push(Meteor.subscribe('deckArchetypes', this.params.format));
                   if(this.params.format != null) subscriptions.push(Meteor.subscribe('deckArchetypes', this.params.format));

                   if(this.params.deckSelected != null){
                       subscriptions.push(Meteor.subscribe('joinExampleCardsDaily', this.params.format, this.params.deckSelected.replace(/-/," ")));
                       subscriptions.push(Meteor.subscribe('joinExampleCardsPtq', this.params.format, this.params.deckSelected.replace(/-/," ")));
                       subscriptions.push(Meteor.subscribe('deckcardsweekchange'));
                       return subscriptions;

                   }else if(this.params.format != null)
                   {
                       subscriptions.push(Meteor.subscribe('decknames'));
                       subscriptions.push(Meteor.subscribe('deck'));
                       return subscriptions;
                   }else{
                       subscriptions.push(Meteor.subscribe('deckplaylist'));
                       return subscriptions;
                   }
               }
           });

//Template.topMenu.rendered = function(){
//    var template = this;
//    this.findAll("a").forEach( function(element){
//        var id = element.id;
//        var name = id.substring(0, id.length-4);
//
//
//        $(element).css("color", Session.get(name));
//        $(element).hover(function () {
//                //console.log(Session.get(name));
//           $(this).css({"border-top-color": Session.get(name),
//               "border-top-width":"2px",
//               "border-top-style":"solid"})
//        },
//            function () {
//            $(this).css({"border-top-color": "transparent",
//                "border-top-width":"2px",
//                "border-top-style":"solid"})
//            }
//
//        );
//    });
//};

divideDeckByDate = function(){
    var options = {types : ["daily3_1", "daily4_0", "ptqTop8", "ptqTop9_16", "ptqTop17_32"], dates : ["twoWeeks", "sixWeeks", "year"]};

    var dates = getDateSyntax(options.dates);
    var positions = positionValues(options.types);
    var formatDecks = _DeckNames.find({format : "modern"}).map(function(deckName){ return {name : deckName.name, quantity : 0}});

    var values = {};
    for(var h = 0; h < dates.length; h++){
        var date = dates[h];
        for(var i = 0; i < positions.length; i++){
            var position = positions[i];
            var positionQuantity = _Deck.find({format : "modern", $or : [position.position], date : {$gte : date.date }}).count();
            for(var j = 0; j < formatDecks.length; j++ ){
                formatDecks[j].quantity = _Deck.find({name : formatDecks[j].name, format : "modern", $or : [position.position], date : {$gte : date.date }}).count();
                if(formatDecks[j].quantity > 0){
                    if (typeof values[date.type] === 'undefined') { values[date.type] = {} }
                    if (typeof values[date.type][position.name] === 'undefined') { values[date.type][position.name] = {quantity : positionQuantity, decks : []} }
                    if (typeof values[date.type][position.name]["decks"][formatDecks[j].name] === 'undefined') { values[date.type][position.name]["decks"][formatDecks[j].name] = 0 }
                    values[date.type][position.name]["decks"][formatDecks[j].name] = formatDecks[j].quantity;
                }
            }
        }
    }
    return values;
};


createCombinationsValues = function(values){
    var options = {types : ["daily3_1", "daily4_0", "ptqTop8", "ptqTop9_16", "ptqTop17_32"], dates : ["twoWeeks", "sixWeeks", "year"]};
    var typesCombination = permutationAndCombination(options.types);
    var combinationsValues = {};
    for(var i = 0; i < options.dates.length; i++){
        var date = options.dates[i];
        if (typeof values[date] === 'undefined') { continue; };
        for(var j = 0; j < typesCombination.length; j++){
            var combination = typesCombination[j];
            for(var k = 0; k < combination.length; k++){
                if (typeof values[date][combination[k]] === 'undefined') { continue };
                for(var key in values[date][combination[k]]["decks"]){
                    if (typeof combinationsValues[date] === 'undefined') { combinationsValues[date] = {} };
                    if (typeof combinationsValues[date][combination.toString()] === 'undefined') { combinationsValues[date][combination.toString()] = {quantity : 0, decks : {}} };
                    if (typeof combinationsValues[date][combination.toString()]["decks"][key] === 'undefined') { combinationsValues[date][combination.toString()]["decks"][key] = 0};
                    combinationsValues[date][combination.toString()]["decks"][key] += values[date][combination[k]]["decks"][key];
                }
                combinationsValues[date][combination.toString()]["quantity"] += values[date][combination[k]].quantity
            }
        }
    }
    return combinationsValues;
}

createPercentage = function(values){
    for(var date in values){
        for(var type in values[date]){
            for(var deckName in values[date][type]["decks"]){
                values[date][type]["decks"][deckName] = {quantity : values[date][type]["decks"][deckName], perc : values[date][type]["decks"][deckName]/values[date][type]["quantity"]};
            }
        }
    }

    for(var date in values) {
        for (var type in values[date]) {
            _MetaValues.update({option: "deck", date: date, type: type},
                {
                    $set: {quantity: values[date][type]["quantity"], decks: values[date][type]["decks"]},
                    $setOnInsert: {option: "deck", date: date, type: type, quantity: values[date][type]["quantity"], decks: values[date][type]["decks"]}
                },
                {
                    upsert: true
                });
        }
    };
    return values;
}

createArchetypes = function(deckValues){
    var options = {types : ["daily3_1", "daily4_0", "ptqTop8", "ptqTop9_16", "ptqTop17_32"], dates : ["twoWeeks", "sixWeeks", "year"]};
    var typesCombinations = permutationAndCombination(options.types);


    var archetypes = _deckArchetypes.find({format : "modern"}).map(function(x){
        var decks = x.deckNames.map(function(deck){
            return deck.name;
        });
        return {name : x.archetype, decks : decks};
    });

    var archetypesResults = [];
    for(var date in deckValues){
        for(var typesComb in deckValues[date]){
            for(var i = 0; i < archetypes.length; i++){
                var archetype = archetypes[i];
                var total = 0;
                for(var j = 0; j < archetype.decks.length; j++){
                    var deck = archetype.decks[j];
                    if (typeof archetypesResults[date] === 'undefined') { archetypesResults[date] = {} };
                    if (typeof archetypesResults[date][typesComb] === 'undefined') { archetypesResults[date][typesComb] = {} };
                    if (typeof archetypesResults[date][typesComb][archetype.name] === 'undefined') { archetypesResults[date][typesComb][archetype.name] = {total : 0, decks : []} };
                    if (typeof deckValues[date][typesComb]["decks"][deck] === 'undefined') {
                        archetypesResults[date][typesComb][archetype.name]["decks"][deck] = 0;
                    }else{
                        archetypesResults[date][typesComb][archetype.name]["decks"][deck] = deckValues[date][typesComb]["decks"][deck];
                        archetypesResults[date][typesComb][archetype.name]["total"] += deckValues[date][typesComb]["decks"][deck][perc];
                    }
                };
            }
        }
    }
    return archetypesResults;
};

weeklyArchetypeChange = function(){
    var options = {types : ["daily3_1", "daily4_0", "ptqTop8", "ptqTop9_16", "ptqTop17_32"], dates : ["twoWeeks", "sixWeeks", "year"]},
        dates = options.dates,
        typesCombinations = permutationAndCombination(options.types),
        archetypes = _deckArchetypes.find({format : "modern"}).fetch();

    dates.forEach(function(date, j) {
        typesCombinations.forEach(function (typeCombination) {
            var archetypeQuantity = 0;
            var query = _MetaValues.findOne({option : "deck", type : typeCombination.toString(), date : date});
            if(query == null){ return }
            var archetypesPercentage = [];
            archetypes.forEach(function(archetype, i){
                var deckNames = archetype.deckNames;

                var totalPercentage = 0, totalQuantity = 0;
                deckNames.forEach(function(name){
                    var result = query["values"].filter(function( obj ) {
                        return obj.name == name.name;
                    });
                    if(result.length != 1) return;

                    totalPercentage += result[0].percentage;
                    totalQuantity += result[0].quantity;
                    archetypeQuantity += result[0].quantity;
                });
                archetypesPercentage.push({name : archetype.archetype, quantity : totalQuantity, percentageBonita : prettifyPercentage(totalPercentage, 2), percentage : totalPercentage});
            });

            optionPosition(archetypesPercentage);
            weeklyDeckBlockChange2(archetypesPercentage, date, typeCombination);
            weeklyDeckBlockAdding2(archetypesPercentage, date, typeCombination);

            archetypesPercentage.forEach(function(deck){
                console.log(deck);
                var baseValues = {option: "deck", type : typeCombination.toString, format : "modern"};
                var newValues = {option: "deck", type : typeCombination.toString, format : "modern"};
                for(var key in deck){
                    newValues[key] = deck[key];
                }

                //_temp.update(baseValues,
                //    {
                //        $set: deck,
                //        $setOnInsert: newValues
                //    },
                //    {
                //        upsert: true
                //    }
                //);
            });




            //_MetaValues.update({option: "archetype", date: date, type: type.toString()},
            //    {
            //        $set: {quantity: archetypeQuantity, values: archetypesPercentage},
            //        $setOnInsert: {option: "archetype", date: date, type: type.toString(), quantity: archetypeQuantity, values: archetypesPercentage}
            //    },
            //    {
            //        upsert: true
            //    }
            //);
        });
    });
};

getWeeklyPosition = function(values, names, weeksQuantity){
    var positions = [];
    for(var i = 0; i < weeksQuantity; i++){
        var weeks = [];
        values.forEach(function(decks){
            weeks.push({name : decks.name, value : decks.percentage[i]});
        });

        weeks.sort(function(a, b){
            return b.value - a.value;
        });

        var position = 0;
        var base_value = 9999;
        weeks.forEach(function(deck){
            if(deck.value == base_value){
                deck.position = position;
            }else if(deck.value < base_value){
                position++;
                base_value = deck.value;
                deck.position = position;
            }
        });
        positions.push(weeks);
    };

    var optionValues = [];
    names.forEach(function(name){
        var weekValues = [];
        positions.forEach(function(week){
            var weekValue = week.find(function(obj){
                return obj.name == name;
            });
            weekValues.push(weekValue.position);
        });
        var index = values.findIndex(function(obj){
            return obj.name == name;
        });
        values[index].position = weekValues;
    });
    _temp.insert({values : values});
};

weeklyPosition = function(position){
    var options = ["deckBlocks", "archetypesBlock", "deckBlocksAdding", "archetypeBlocksAdding"];
    options.forEach(function(option){
        _MetaValues.find({option : option}).forEach(function(value){
            var weeksQuantity = value.values[0].percentage.length;
            var positions = [];
            for(var i = 0; i < weeksQuantity; i++){
                var weeks = [];
                value.values.forEach(function(decks){
                    weeks.push({name : decks.name, value : decks.percentage[i]});
                });
                weeks.sort(function(a, b){
                    return b.value - a.value;
                });
                var position = 0;
                var base_value = 9999;
                weeks.forEach(function(deck){
                    if(deck.value == base_value){
                        deck.position = position;
                    }else if(deck.value < base_value){
                        position++;
                        base_value = deck.value;
                        deck.position = position;
                    }
                });
                positions.push(weeks);
            };
            var deckNames = positions[0].map(function(deck){
                return deck.name
            });
            var optionValues = [];
            deckNames.forEach(function(name){
                var weekValues = [];
                positions.forEach(function(week){
                    var weekValue = week.find(function(obj){
                       return obj.name == name;
                    });
                    weekValues.push(weekValue.position);
                });
                optionValues.push({name : name, position : weekValues});
            });
            _temp.insert({value : optionValues});
        });
    });
}


weeklyArchetypeBlockChange = function(){
    var options = {types : ["daily3_1", "daily4_0", "ptqTop8", "ptqTop9_16", "ptqTop17_32"], dates : ["twoWeeks", "sixWeeks", "year"]},
        typesCombinations = permutationAndCombination(options.types),
        archetypes = _deckArchetypes.find({format : "modern"}).fetch(),
        archetypesNames = _deckArchetypes.find({format : "modern"}).map(function(obj){return obj.archetype});

    typesCombinations.forEach(function (typeCombination, j) {
        var query = _MetaValues.findOne({option : "deckBlocks", type : typeCombination.toString()});
        if(query == null){ return }

        var archetypesValues = [];
        var weeksQuantity = 0;
        archetypes.forEach(function(archetype, i){
            var deckNames = archetype.deckNames,
                archetypePercentage = [],
                archetypeQuantity = [];
            deckNames.forEach(function(name) {
                var deckArray = query["values"].find(function (obj) {
                    return obj.name == name.name;
                });
                weeksQuantity = deckArray.percentage.length;
                if(deckArray == null) return;
                if(deckArray.percentage.length != archetypePercentage.length){
                    archetypePercentage = deckArray.percentage.slice();
                    archetypeQuantity = deckArray.weekDataQuantity.slice();
                }else{
                    for(var k = 0; k < deckArray.percentage.length; k++){
                        archetypePercentage[k] += deckArray.percentage[k];
                        archetypeQuantity[k] += deckArray.weekDataQuantity[k];
                    }
                }
            });
            archetypesValues.push({name : archetype.archetype, percentage : archetypePercentage, weekDataQuantity : archetypeQuantity});
        });

        getWeeklyPosition(archetypesValues, archetypesNames, weeksQuantity);
        //_MetaValues.update({option: "archetypeBlocks", type : typeCombination.toString()},
        //    {
        //        $set: {values : archetypesValues},
        //        $setOnInsert: {option: "archetypeBlocks", type : typeCombination.toString(), values : archetypesValues}
        //    },
        //    {
        //        upsert: true
        //    }
        //);
    });
};






weeklyArchetypeAddingBlockChange = function(){
    var options = {types : ["daily3_1", "daily4_0", "ptqTop8", "ptqTop9_16", "ptqTop17_32"], dates : ["twoWeeks", "sixWeeks", "year"]},
    typesCombinations = permutationAndCombination(options.types),
    archetypes = _deckArchetypes.find({format : "modern"}).fetch();

    typesCombinations.forEach(function (typeCombination, j) {
        var query = _MetaValues.findOne({option : "deckBlocksAdding", type : typeCombination.toString()});
        if(query == null){ return }

        var archetypesValues = [];
        archetypes.forEach(function(archetype, i){
            var deckNames = archetype.deckNames,
                archetypePercentage = [],
                archetypeQuantity = [];
            deckNames.forEach(function(name) {
                var deckArray = query["values"].find(function (obj) {
                    return obj.name == name.name;
                });
                if(deckArray == null) return;
                if(deckArray.percentage.length != archetypePercentage.length){
                    archetypePercentage = deckArray.percentage.slice();
                    archetypeQuantity = deckArray.weekDataQuantity.slice();
                }else{
                    for(var k = 0; k < deckArray.percentage.length; k++){
                        archetypePercentage[k] += deckArray.percentage[k];
                        archetypeQuantity[k] += deckArray.weekDataQuantity[k];
                    }
                }
            });
            archetypesValues.push({name : archetype.archetype, percentage : archetypePercentage, weekDataQuantity : archetypeQuantity});
        });
        _MetaValues.update({option: "archetypeBlocksAdding", type : typeCombination.toString()},
            {
                $set: {values : archetypesValues},
                $setOnInsert: {option: "archetypeBlocksAdding", type : typeCombination.toString(), values : archetypesValues}
            },
            {
                upsert: true
            }
        );
    });
};


weeklyDeckBlockChange = function(){
    var options = {types : ["daily3_1", "daily4_0", "ptqTop8", "ptqTop9_16", "ptqTop17_32"], dates : ["twoWeeks", "sixWeeks", "year"]},
        typesCombinations = positionCombinationsOptions(options.types),
        decksNames = _DeckNames.find({format : "modern"}).map(function(name){
            return name.name;
        }),
        weeksQuantity = 10;


    typesCombinations.forEach(function(typeCombination){
        var deckValues = [];
        decksNames.forEach(function(name){
            var weekDataPercentage = [],
                weekDataQuantity = [],
                weekChange = [],
                weekNegPosChange = [],
                weekDateEnd = new Date(Date.UTC(2015, 11, 12, 23, 59, 59, 999)),
                weekDateStart = new Date((weekDateEnd.getTime()  + 1) - (86400000 * 7));


            var lastWeekValue = 0;
            for(var i = 0; i < weeksQuantity; i++) {
                var position = "";
                var change = 0;
                var result = 0;
                var allDecksQuery = _Deck.find({format: "modern", $or: typeCombination.values, date: {$gte: weekDateStart, $lte: weekDateEnd}}).fetch();
                var deckQuery = _Deck.find({name: name, format: "modern", $or: typeCombination.values, date: {$gte: weekDateStart, $lte: weekDateEnd}}).fetch();
                if (allDecksQuery.length != 0){
                    result = deckQuery.length/allDecksQuery.length;
                }

                if(result > lastWeekValue){
                    position = "up";
                    change = result - lastWeekValue;
                }else if(result < lastWeekValue){
                    change = result - lastWeekValue;
                    position = "down";
                }else{
                    position = "equal";
                }
                lastWeekValue = result;

                weekDataPercentage.push(result);
                weekDataQuantity.push(deckQuery.length);
                weekChange.push(position);
                weekNegPosChange.push(change);

                weekDateStart = new Date(weekDateStart.getTime() - (86400000 * 7));
                weekDateEnd = new Date(weekDateEnd.getTime() - (86400000 * 7));
            }

            deckValues.push({name : name, percentage : weekDataPercentage, weekDataQuantity : weekDataQuantity, weekChange : weekChange, weekNegPosChange : weekNegPosChange});
        });
        getWeeklyPosition(deckValues, decksNames, weeksQuantity);

        _temp.update({option: "deckBlocks", type : typeCombination.toString},
            {
                $set: {values : deckValues},
                $setOnInsert: {option: "deckBlocks", type : typeCombination.toString, values : deckValues}
            },
            {
                upsert: true
            }
        );
    });
};

weeklyDeckBlockAdding = function(){
    var options = {types : ["daily3_1", "daily4_0", "ptqTop8", "ptqTop9_16", "ptqTop17_32"], dates : ["twoWeeks", "sixWeeks", "year"]},
        typesCombinations = positionCombinationsOptions(options.types),
        dates = getDateSyntax(options.dates),
        decksNames = _DeckNames.find({format : "modern"}).map(function(name){
            return name.name;
        });

    dates.forEach(function(date){
        typesCombinations.forEach(function(typeCombination){
            var deckValues = [];
            decksNames.forEach(function(name){
                var weekDataPercentage = [],
                    weekDataQuantity = [],
                    weekDateEnd = new Date(Date.UTC(2015, 11, 12, 23, 59, 59, 999)),
                    dateStart = new Date((weekDateEnd.getTime()  + 1) - (86400000 * 7 *  (date.weeks + 1))),
                    dateEnd = new Date((dateStart.getTime()  - 1) + (86400000 * 7));
                for(var i = -1; i < date.weeks; i++) {
                    var result = 0;
                    var allDecksQuery = _Deck.find({format: "modern", $or: typeCombination.values, date: {$gte: dateStart, $lte: dateEnd}}).fetch();
                    var deckQuery = _Deck.find({name: name, format: "modern", $or: typeCombination.values, date: {$gte: dateStart, $lte: dateEnd}}).fetch();
                    if (allDecksQuery.length != 0){
                        result = deckQuery.length/allDecksQuery.length;
                    }
                    weekDataPercentage.push(result);
                    weekDataQuantity.push(deckQuery.length);
                    dateEnd = new Date(dateEnd.getTime() + (86400000 * 7));
                }
                deckValues.push({name : name, percentage : weekDataPercentage, weekDataQuantity : weekDataQuantity});
            });
            _MetaValues.update({option: "deckBlocksAdding", type : typeCombination.toString},
                {
                    $set: {values : deckValues},
                    $setOnInsert: {option: "deckBlocksAdding", type : typeCombination.toString, values : deckValues}
                },
                {
                    upsert: true
                }
            );
        });
    });
};

//jQuery(document).ready(function($){
//	//open/close mega-navigation
//	$('.cd-dropdown-trigger').on('click', function(event){
//		event.preventDefault();
//		toggleNav();
//	});
//
//	//close meganavigation
//	$('.cd-dropdown .cd-close').on('click', function(event){
//		event.preventDefault();
//		toggleNav();
//	});
//
//	//on mobile - open submenu
//	$('.has-children').children('a').on('click', function(event){
//		//prevent default clicking on direct children of .has-children
//		event.preventDefault();
//		var selected = $(this);
//		selected.next('ul').removeClass('is-hidden').end().parent('.has-children').parent('ul').addClass('move-out');
//	});
//
//	//on desktop - differentiate between a user trying to hover over a dropdown item vs trying to navigate into a submenu's contents
//	var submenuDirection = ( !$('.cd-dropdown-wrapper').hasClass('open-to-left') ) ? 'right' : 'left';
//	$('.cd-dropdown-content').menuAim({
//		activate: function(row) {
//			$(row).children().addClass('is-active').removeClass('fade-out');
//			if( $('.cd-dropdown-content .fade-in').length == 0 ) $(row).children('ul').addClass('fade-in');
//		},
//		deactivate: function(row) {
//			$(row).children().removeClass('is-active');
//			if( $('li.has-children:hover').length == 0 || $('li.has-children:hover').is($(row)) ) {
//				$('.cd-dropdown-content').find('.fade-in').removeClass('fade-in');
//				$(row).children('ul').addClass('fade-out')
//			}
//		},
//		exitMenu: function() {
//			$('.cd-dropdown-content').find('.is-active').removeClass('is-active');
//			return true;
//		},
//		submenuDirection: submenuDirection,
//	});
//
//	//submenu items - go back link
//	$('.go-back').on('click', function(){
//		var selected = $(this),
//			visibleNav = $(this).parent('ul').parent('.has-children').parent('ul');
//		selected.parent('ul').addClass('is-hidden').parent('.has-children').parent('ul').removeClass('move-out');
//	});
//
//	function toggleNav(){
//		var navIsVisible = ( !$('.cd-dropdown').hasClass('dropdown-is-active') ) ? true : false;
//		$('.cd-dropdown').toggleClass('dropdown-is-active', navIsVisible);
//		$('.cd-dropdown-trigger').toggleClass('dropdown-is-active', navIsVisible);
//		if( !navIsVisible ) {
//			$('.cd-dropdown').one('webkitTransitionEnd otransitionend oTransitionEnd msTransitionEnd transitionend',function(){
//				$('.has-children ul').addClass('is-hidden');
//				$('.move-out').removeClass('move-out');
//				$('.is-active').removeClass('is-active');
//			});
//		}
//	}
//
//	//IE9 placeholder fallback
//	//credits http://www.hagenburger.net/BLOG/HTML5-Input-Placeholder-Fix-With-jQuery.html
//	if(!Modernizr.input.placeholder){
//		$('[placeholder]').focus(function() {
//			var input = $(this);
//			if (input.val() == input.attr('placeholder')) {
//				input.val('');
//			}
//		}).blur(function() {
//			var input = $(this);
//			if (input.val() == '' || input.val() == input.attr('placeholder')) {
//				input.val(input.attr('placeholder'));
//			}
//		}).blur();
//		$('[placeholder]').parents('form').submit(function() {
//			$(this).find('[placeholder]').each(function() {
//				var input = $(this);
//				if (input.val() == input.attr('placeholder')) {
//					input.val('');
//				}
//			})
//		});
//	}
//});


//Router.route('debug', {
//    path : '/debug/:format?/:deckID?',
//    data: function(){
//
//        if(this.params.hasOwnProperty("format") ) {
//            Session.set(SV_deckNamingFormat, this.params.format);
//        }
//
//        if(this.params.deckID){
//            Meteor.call('findOneDeckWithoutName',this.params.deckID, function (error, data) {
//                if (error) {
//                    console.log(error);
//                    return;
//                }
//                Session.set('uniqueDeckPercentageOptions', data);
//            });
//        }
//
//        var siteName = "";
//        if(this.params.format){
//            siteName = "deck naming: " +  this.params.format;
//        }else{
//            siteName += "deck naming";
//        }
//    },
//    waitOn : function(){
//        return Meteor.subscribe("testing", this.params.format);
//    },
//    fastRender : true
//});


getEventQuantityOfBooters = function(address, callback){
    var result = request.getSync(address, {
        encoding: null
    });

    var buffer = result.body;
    var $ = cheerio.load(buffer);
    var field = $($('h5')[0]).html();
    var quantityPatt = /x\d/i;
    var xQuantityPatt = /\d/i;
    var quantity = field.match(quantityPatt)[0].match(xQuantityPatt)[0];
    return quantity;
}

getEventDeckInformation = function(event){
    if(event.type === "ptq" | event.type === "premier" | event.type === "mocs"){
        getTop8(event);
    }else{
        getDaily(event);
    }
}

getTop8 = function(event){
    var result = request.getSync(event.httpAddress, {
        encoding: null
    });

    var buffer = result.body;
    var $ = cheerio.load(buffer);

    var decks = $('.bean--wiz-content-deck-list');

    var rows = $(".even, .odd");
    var options = $("thead th");
    var tableInformation = [];

    var top8TableInformation = [];

    var top8Table = $(".top-bracket-slider");

    var top8Information = getTop8Table($, top8Table);

    _Event.update({_id : event._id},{
        $set : {top8Table : top8Information}
    });

    for(var i = 0 ; i < decks.length; i++){
        var information = getDeckInfoFromTop8($(decks[i]).find('h4').html());
        var data = {
            _eventID : event._id,
            date : event.date,
            type : event.type,
            format : event.format,
            player : information.player,
            position : information.position
        };

        var _deckID = _Deck.insert(data);

        var cards = $(decks[i]).find('.sorted-by-overview-container .row');
        for(var j = 0; j < cards.length; j++){
            var quantity = $(cards[j]).find('.card-count').text();
            var name = $(cards[j]).find('.card-name').text();


            name = fixCards(name);
            _DeckCards.insert({
                _deckID : _deckID,
                name : name,
                quantity : quantity,
                sideboard : false
            });
        }
        var colors = setUpColorForDeckName(_deckID);

        _Deck.update({_id : _deckID},{
            $set : {colors : colors}
        });

        var sideboard = $(decks[i]).find('.sorted-by-sideboard-container .row');
        for(j = 0; j < sideboard.length; j++){
            var quantity = $(sideboard[j]).find('.card-count').text();
            var name = $(sideboard[j]).find('.card-name').text();
            name = fixCards(name);
            _DeckCards.insert({
                _deckID : _deckID,
                name : name,
                quantity : quantity,
                sideboard : true
            });
        }
    }
}

getTop8Table = function($, top8Table){
    var quarterFinalsPlayers = {};
    var semiFinalsPlayers = {};
    var finalsPlayers = {};

    quarterFinalsPlayers.winners = top8Table.find(".quarterfinals .dual-players strong");
    quarterFinalsPlayers.losers = top8Table.find(" .quarterfinals .dual-players .player + .player p");
    semiFinalsPlayers.winners = top8Table.find(".semifinals .dual-players strong");
    semiFinalsPlayers.losers = top8Table.find(".semifinals .dual-players .player + .player p");
    finalsPlayers.winners = top8Table.find(".finals .dual-players strong");
    finalsPlayers.losers = top8Table.find(".finals .dual-players .player + .player p");


    var top8 = {quarterFinals : [], semiFinals : [], finals : []};


    for(var i = 0; i<quarterFinalsPlayers.winners.length; i++){
        top8.quarterFinals.push(
            {
                winner : getInfoFromPlayerTop8Winner($(quarterFinalsPlayers.winners[i]).html()),
                loser : getInfoFromPlayerTop8Loser($(quarterFinalsPlayers.losers[i]).html())
            });

    }

    for(var i = 0; i<semiFinalsPlayers.winners.length; i++){
        top8.semiFinals.push(
            {
                winner : getInfoFromPlayerTop8Winner($(semiFinalsPlayers.winners[i]).html()),
                loser : getInfoFromPlayerTop8Loser($(semiFinalsPlayers.losers[i]).html())
            });
    }

    for(var i = 0; i<finalsPlayers.winners.length; i++){
        top8.finals.push(
            {
                winner : getInfoFromPlayerTop8Winner($(finalsPlayers.winners[i]).html()),
                loser : getInfoFromPlayerTop8Loser($(finalsPlayers.losers[i]).html())
            });
    }

    return top8;
}

getInfoFromPlayerTop8Loser = function(line){
    var positionPatt = new RegExp(/\d/);
    var scoreWinPatt = new RegExp(/(?:\(\d\)\s)[^, ]+(?:, )(\d)/);
    var scoreLosePatt = new RegExp(/(?:\(\d\)\s)[^, ]+(?:, )\d-(\d)/);
    var namePatt = new RegExp(/(?:\(\d\)\s)([^, ]+)/);
    var information = {};
    //information.position = positionPatt.exec(line)[0];
    information.name = namePatt.exec(line)[1];
    return information;
}

getInfoFromPlayerTop8Winner = function(line){
    var scoreWinPatt = new RegExp(/(?:\(\d\)\s)[^, ]+(?:, )(\d)/);
    var scoreLosePatt = new RegExp(/(?:\(\d\)\s)[^, ]+(?:, )\d-(\d)/);
    var namePatt = new RegExp(/(?:\(\d\)\s)([^, ]+)(?:, )/);

    var information = {};
    information.name = namePatt.exec(line)[1];
    information.wins = scoreWinPatt.exec(line)[1];
    information.losses = scoreLosePatt.exec(line)[1];


    return information;
}


getDaily = function(event){
    var result = request.getSync(event.httpAddress, {
        encoding: null
    });

    var buffer = result.body;
    var $ = cheerio.load(buffer);
    var decks = $('.bean--wiz-content-deck-list');

    var rows = $(".even, .odd");
    var options = $("thead th");
    var tableInformation = [];

    for(var i = 0 ; i < rows.length; i++) {
        var columns = $(rows[i]).find("td");
        var table = {};
        for(var j = 0; j < options.length; j++){
            table[$(options[j]).html()] = $(columns[j]).html();
        }
        tableInformation.push(table);
    }

    for(var i = 0 ; i < decks.length; i++){
        //var deckNumbers = tableInformation[i];

        var information = getDeckInfo($(decks[i]).find('h4').html());
        var data = {
            _eventID : event._id,
            date : event.date,
            type : event.type,
            player : information.player,
            format : event.format,
            victory : information.victory,
            draw : information.draw,
            loss : information.loss
        };


        var _deckID = _Deck.insert(data);

        var cards = $(decks[i]).find('.sorted-by-overview-container .row');
        var mainDeckQuantity = 0;
        for(var j = 0; j < cards.length; j++){
            var quantity = parseInt($(cards[j]).find('.card-count').text());
            mainDeckQuantity += quantity;
            var name = $(cards[j]).find('.card-name').text();
            name = fixCards(name);
            _DeckCards.insert({
                _deckID : _deckID,
                name : name,
                quantity : quantity,
                sideboard : false
            });
        }


        var colors = setUpColorForDeckName(_deckID);

        _Deck.update({_id : _deckID},{
            $set : {colors : colors}
        });

        var sideboard = $(decks[i]).find('.sorted-by-sideboard-container .row');
        var sideboardQuantity = 0;
        for(j = 0; j < sideboard.length; j++){
            var quantity = parseInt($(sideboard[j]).find('.card-count').text());
            sideboardQuantity += quantity;
            var name = $(sideboard[j]).find('.card-name').text();
            name = fixCards(name);
            _DeckCards.insert({
                _deckID : _deckID,
                name : name,
                quantity : quantity,
                sideboard : true
            });
        }

        if(mainDeckQuantity < 60){
            console.log("Deck With less than 60: " + _deckID + " " + mainDeckQuantity);
            console.log(event.httpAddress);
            console.log(information.player);
            _Deck.update({_id : _deckID}, {$set : {missingCards : true}});
        }
        if(sideboardQuantity < 15){
            console.log("Deck With less than 15: " + _deckID + " " + sideboardQuantity);
            console.log(event.httpAddress);
            console.log(information.player);
        }
    }
}

fixCards = function (card) {
    card = card.replace("\xC6", "Ae");
    card = card.replace("\xE9", "e");
    card = _.capitalize(card);
    return card;
}

getDeckInfoFromTop8 = function(information){
    var playerPatt = /^(.*?) \(/;
    var positionPatt = /(?:.+\()(\d+?)(?=\D)/;
    var temp = {};
    temp.player = information.match(playerPatt)[1];
    temp.position = parseInt(information.match(positionPatt)[1]);
    return temp;
}


getDeckInfo = function(information){
    var scorePatt = /([0-9]{1,2}-){1,3}[0-9]{1,2}/;
    var playerPatt = /^(.*?) \(/;
    var digitPatt = /\d+/g;
    var temp = {};
    var score = information.match(scorePatt)[0];
    var results = score.match(digitPatt);
    temp.player = information.match(playerPatt)[1];


    if(results.length==2){
        temp.victory = parseInt(results[0]);
        temp.loss = parseInt(results[1]);
        temp.draw = 0;
    }else if(results.length==3){
        temp.victory = parseInt(results[0]);
        temp.draw = parseInt(results[1]);
        temp.loss = parseInt(results[2]);
    }
    return temp;
}


function getTheEventNumberAndDate(information){
    var _eventNumberPatt = /(#[0-9]*)/;
    var datePatt = /(0[1-9]|1[012])[- \/.](0[1-9]|[12][0-9]|3[01])[- \/.](19|20)\d\d/;

    var eventInformation = {};

    eventInformation._eventNumber = information.match(_eventNumberPatt)[0];
    eventInformation.date = new Date(information.match(datePatt)[0]);

    return eventInformation;
}

getInfoFromEvent = function(information){
    var _eventNumberPatt = /#[0-9]*/;
    var dataPatt = /(0[1-9]|1[012])[- \/.](0[1-9]|[12][0-9]|3[01])[- \/.](19|20)\d\d/;
    var eventInformation = {};
    eventInformation._eventNumber = information.match(_eventNumberPatt)[0];
    eventInformation.date = information.match(dataPatt)[0];
    return eventInformation;
}



Router.route('dashBoard', {
    path : '/dashBoard/:format?',
    data: function(){
        Session.set("topMenuSite", "dashBoard");
    },
    waitOn : function(){
        return [
            // Meteor.subscribe("notCompleteEvent"),
            // Meteor.subscribe("DecksNames")
        ]
    }
});



Router.route('dBArchetypes', {
    path : '/dBArchetypes/:format?',
    data: function(){
        Session.set("topMenuSite", "dBArchetypes");

    },
    waitOn : function(){

    }
});


Router.route('dBDeckNames', {
    path : '/dBDeckNames/:format?',
    data: function(){
        Session.set("topMenuSite", "dBDeckNames");

    },
    waitOn : function(){

    }
});


Router.route('deckWithoutNames', {
    path : '/deckswithoutnames/:format?',
    data: function(){
        Session.set("topMenuSite", "deckswithoutnames");
    },
    waitOn : function(){

    }
});

 "click .upVote" : function(evt, tmp){
        var that = this;
        var indexThat = Template.instance().playlistsInfo.get().findIndex(function(currentValue, index, arr){
            return currentValue._id == that._id
        });

        if(Template.instance().playlistsInfo.get()[indexThat].likes == null){
            Template.instance().playlistsInfo.get()[indexThat].likes = [];
        }

        if(Template.instance().playlistsInfo.get()[indexThat].dislikes == null){
            Template.instance().playlistsInfo.get()[indexThat].dislikes = [];
        }

        Template.instance().playlistsInfo.get()[indexThat].likes.push({_id : Meteor.user()._id});
        Template.instance().playlistsInfo.get()[indexThat].likeCount++;


        if(Template.instance().playlistsInfo.get()[indexThat].dislikes.length == 1){
            Template.instance().playlistsInfo.get()[indexThat].dislikes = [];
            Template.instance().playlistsInfo.get()[indexThat].likeCount++;
        }
        Template.instance().playlistsInfo.set(Template.instance().playlistsInfo.get());
        Meteor.call("upADeckPlayListVote", this);
    },
    "click .removeUpVote" : function(evt, tmp){
        var that = this;
        var indexThat = Template.instance().playlistsInfo.get().findIndex(function(currentValue, index, arr){
            return currentValue._id == that._id
        });

        Template.instance().playlistsInfo.get()[indexThat].likes = [];
        Template.instance().playlistsInfo.get()[indexThat].likeCount--;

        Template.instance().playlistsInfo.set(Template.instance().playlistsInfo.get());
        Meteor.call("removeUpADeckPlayListVote", this);
    },
    "click .downVote" : function(evt, tmp){
        var that = this;
        var indexThat = Template.instance().playlistsInfo.get().findIndex(function(currentValue, index, arr){
            return currentValue._id == that._id
        });

        if(Template.instance().playlistsInfo.get()[indexThat].likes == null){
            Template.instance().playlistsInfo.get()[indexThat].likes = [];
        }

        if(Template.instance().playlistsInfo.get()[indexThat].dislikes == null){
            Template.instance().playlistsInfo.get()[indexThat].dislikes = [];
        }

        Template.instance().playlistsInfo.get()[indexThat].dislikes.push({_id : Meteor.user()._id});
        Template.instance().playlistsInfo.get()[indexThat].likeCount--;


        if(Template.instance().playlistsInfo.get()[indexThat].likes.length == 1){
            Template.instance().playlistsInfo.get()[indexThat].likes = [];
            Template.instance().playlistsInfo.get()[indexThat].likeCount--;
        }
        Template.instance().playlistsInfo.set(Template.instance().playlistsInfo.get());
        Meteor.call("downADeckPlayListVote", this);
    },
    "click .removeDownVote" : function(evt, tmp){

        var that = this;
        var indexThat = Template.instance().playlistsInfo.get().findIndex(function(currentValue, index, arr){
            return currentValue._id == that._id
        });

        Template.instance().playlistsInfo.get()[indexThat].dislikes = [];
        Template.instance().playlistsInfo.get()[indexThat].likeCount++;

        Template.instance().playlistsInfo.set(Template.instance().playlistsInfo.get());

        Meteor.call("removeDownADeckPlayListVote", this);
    }

        upADeckPlayListVote : function(playlist){
            DecksNamesPlaylists.update(
                {
                    _id : playlist._id,
                    dislikes : {_id : Meteor.user()._id}
                },{
                    $inc : {likeCount : 1},
                    $pull : {dislikes : {_id : Meteor.user()._id}}
                }
            )

            DecksNamesPlaylists.update(
                {
                    _id : playlist._id,
                    likes : {$ne : Meteor.user()._id}
                },{
                    $inc : {likeCount : 1},
                    $push : {likes : {_id : Meteor.user()._id}}
                }
            )
        },
        removeUpADeckPlayListVote : function(playlist){
            DecksNamesPlaylists.update(
                {
                    _id : playlist._id,
                    likes : {_id : Meteor.user()._id}
                },{
                    $inc : {likeCount : -1},
                    $pull : {likes : {_id : Meteor.user()._id}}
                }
            )
        },
        downADeckPlayListVote : function(playlist){
            DecksNamesPlaylists.update(
                {
                    _id : playlist._id,
                    likes : {_id : Meteor.user()._id}
                },{
                    $inc : {likeCount : -1},
                    $pull : {likes : {_id : Meteor.user()._id}}
                }
            )

            DecksNamesPlaylists.update(
                {
                    _id : playlist._id,
                    dislikes : {$ne : {_id : Meteor.user()._id}}
                },{
                    $inc : {likeCount : -1},
                    $push : {dislikes : {_id : Meteor.user()._id}}
                }
            )
        },
        removeDownADeckPlayListVote : function(playlist){
            DecksNamesPlaylists.update(
                {
                    _id : playlist._id,
                    dislikes : {_id : Meteor.user()._id}
                },{
                    $inc : {likeCount : 1},
                    $pull : {dislikes : {_id : Meteor.user()._id}}
                }
            )
        },


        insertANewVideo = function(youtubeLink){
            var idRegex = new RegExp('(?:youtube\.com\/(?:[^\/]+\/.+\/|(?:v|e(?:mbed)?)\/|.*[?&]v=)|youtu\.be\/)([^"&?\/ ]{11})', 'i');
            var id = youtubeLink.match(idRegex)[1];

            var snippet = getVideoInfo(id).items[0].snippet;

            var information = {};
            information.channel = snippet.channelTitle;
            information.title = snippet.title;
            information.date = new Date(snippet.publishedAt);
            information.link = youtubeLink;
            information.thumbnail = snippet.thumbnails.medium.url;

            Images.insert(information.thumbnail, function (err, fileObj) {
                // Inserted new doc with ID fileObj._id, and kicked off the data upload using HTTP
            });
        }


        makeDeck = function(){
            console.log("Make meta start");
            var decksQuery = _Deck.find({}).fetch();

            decksQuery.forEach(function(decksObj){
                var totalMain = 0;
                var totalSideboard = 0;
                var mainDeckQuery = _DeckCards.find({_deckID : decksObj._id, sideboard : false}).map(function(deckCardsObj){
                    totalMain += parseInt(deckCardsObj.quantity);
                    return {name : deckCardsObj.name, quantity : parseInt(deckCardsObj.quantity)};
                });
                var sideboardsQuery = _DeckCards.find({_deckID : decksObj._id, sideboard : true}).map(function(deckCardsObj){
                    totalSideboard += parseInt(deckCardsObj.quantity);
                    return {name : deckCardsObj.name, quantity : parseInt(deckCardsObj.quantity)};
                });

                var baseId = {_eventID : decksObj._eventID, date : decksObj.date, player : decksObj.player, type : decksObj.type };
                var results = {
                    format : decksObj.format, colors : decksObj.colors, name : decksObj.name, totalMain : totalMain,
                    totalSideboard: totalSideboard, main : mainDeckQuery, sideboard : sideboardsQuery
                };
                var allResults = {};
                for(var key in baseId){
                    allResults[key] = baseId[key];
                }

                for(var key in results){
                    allResults[key] = results[key];
                }

                if(typeof decksObj.position !== "undefined"){
                    results["position"] = decksObj.position;
                }else{
                    results["victory"] = decksObj.victory;
                    results["draw"] = decksObj.draw;
                    results["loss"] = decksObj.loss;
                }
                _eventDecks.update(baseId,
                    {
                        $set : results,
                        $setOnInsert : allResults
                    },
                    {
                        upsert : true
                    }
                );
            });
        };

        weeklyCardChange = function(){

            console.log("WeeklyDeckChange Start");
            var options = {types : ["daily4_0", "daily3_1", "ptqTop8", "ptqTop9_16", "ptqTop17_32"], dates : ["twoWeeks", "sixWeeks", "year"]},
                typesCombinations = positionCombinationsOptions(options.types),
                dates = getDateSyntax(options.dates),
                format = "modern";

            dates.forEach(function(datesObj){
                typesCombinations.forEach(function(typesCombinationsObj){
                    var allDecksQuery = _eventDecks.find({format : format, $or : typesCombinationsObj.values, date : {$gte : datesObj.date }}).fetch();
                    var cardsValueMainboard = [];
                    var cardsValueSideboard = [];
                    allDecksQuery.forEach(function(allDecksObj){
                        allDecksObj.main.forEach(function(mainObj){
                            var card = cardsValueMainboard.find(function(mainObjObj){
                                return mainObjObj.name === mainObj.name;
                            });
                            if(card == null){
                                cardsValueMainboard.push({name : mainObj.name, quantity : mainObj.quantity, inDecks : 1});
                            }else{
                                card.quantity += mainObj.quantity;
                                card.inDecks += 1;
                            }
                        });

                        allDecksObj.sideboard.forEach(function(mainObj){
                            var card = cardsValueMainboard.find(function(mainObjObj){
                                return mainObjObj.name === mainObj.name;
                            });
                            if(card == null){
                                cardsValueMainboard.push({name : mainObj.name, quantity : mainObj.quantity, inDecks : 1});
                            }else{
                                card.quantity += mainObj.quantity;
                                card.inDecks += 1;
                            }
                        });

                    });




                    cardsValueMainboard.forEach(function(cardsValueMainboardObj){
                        cardsValueMainboardObj.percentage = cardsValueMainboardObj.inDecks/allDecksQuery.length;
                        cardsValueMainboardObj.perDeck = cardsValueMainboardObj.quantity/cardsValueMainboardObj.inDecks;
                    });


                    cardsValueSideboard.forEach(function(cardsValueSideboardObj){
                        cardsValueSideboardObj.percentage = cardsValueSideboardObj.inDecks/allDecksQuery.length;
                        cardsValueSideboardObj.perDeck = cardsValueSideboardObj.quantity/cardsValueSideboardObj.inDecks;
                    });

                    cardsValueMainboard.sort(function(a,b){
                        return b.percentage - a.percentage;
                    });

                    cardsValueSideboard.sort(function(a,b){
                        return b.percentage - a.percentage;
                    });


                    var base = 999;
                    var position = 0;
                    cardsValueMainboard.forEach(function(cardsValuesMinaboardObj){
                        var percentage = cardsValuesMinaboardObj.percentage;
                        if(percentage < base){
                            position++;
                            cardsValuesMinaboardObj.position = position;
                            base = percentage

                        }else if(percentage == base){
                            cardsValuesMinaboardObj.position = position;
                        }
                    });

                    base = 999;
                    position = 0;
                    cardsValueSideboard.forEach(function(cardsValueSideboardObj){
                        var percentage = cardsValueSideboardObj.percentage;
                        if(percentage < base){
                            position++;
                            cardsValueSideboardObj.position = position;
                            base = percentage

                        }else if(percentage == base){
                            cardsValueSideboardObj.position = position;
                        }
                    });


                    var baseId = {date : datesObj.type, typesCombinations : typesCombinationsObj.toString, format : format};
                    var results = {
                        decksQuantity : allDecksQuery.length, mainboard : cardsValueMainboard, sideboard : cardsValueSideboard
                    };
                    var allResults = {};
                    for(var key in baseId){
                        allResults[key] = baseId[key];
                    }

                    for(var key in results){
                        allResults[key] = results[key];
                    }

                    _metaCards.update(baseId,
                        {
                            $set : results,
                            $setOnInsert : allResults
                        },
                        {
                            upsert : true
                        }
                    );
                });
            });
            console.log("WeeklyDeckChange End");

        };



// titleCaps = function(title){
//     var small = "(a|an|and|as|at|from|but|by|en|for|if|in|of|on|or|the|to|v[.]?|via|vs[.]?)";
//     var punct = "([!\"#$%&'()*+,./:;<=>?@[\\\\\\]^_`{|}~-]*)";
//
//     var parts = [], split = /[:.;?!] |(?: |^)["�]/g, index = 0;
//
//     while (true) {
//         var m = split.exec(title);
//
//         parts.push( title.substring(index, m ? m.index : title.length)
//             .replace(/\b([A-Za-z][a-z.'�]*)\b/g, function(all){
//                 return /[A-Za-z]\.[A-Za-z]/.test(all) ? all : upper(all);
//             })
//             .replace(RegExp("\\b" + small + "\\b", "ig"), lower)
//             .replace(RegExp("^" + punct + small + "\\b", "ig"), function(all, punct, word){
//                 return punct + upper(word);
//             })
//             .replace(RegExp("\\b" + small + punct + "$", "ig"), upper));
//
//         index = split.lastIndex;
//
//         if ( m ) parts.push( m[0] );
//         else break;
//     }
//
//     return parts.join("").replace(/ V(s?)\. /ig, " v$1. ")
//         .replace(/(['�])S\b/ig, "$1s")
//         .replace(/\b(AT&T|Q&A)\b/ig, function(all){
//             return all.toUpperCase();
//         });
// };
